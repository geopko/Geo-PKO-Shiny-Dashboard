colour=rgb(1.0,0.6,0.1,0.7), size=3) +
scale_x_continuous(breaks =
c(1993:2000))+
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "none",
axis.text.x = element_text(angle=90, hjust=1),
axis.ticks.length.x= unit(0.1, "cm"),
panel.grid.minor.x = element_blank(),
panel.spacing.x = unit(1,"lines")
) +
xlab("Years") +
ylab("Location")+
labs(title=paste("Ocupation of Locations in", sfdf2$Mission),
caption="Data from GeoPKO 2.0")
lolli
lolli <-   ggplot(sfdf2) +
geom_segment(aes(x=start_date, xend=end_date, y=fct_reorder(Location, start_date), yend=fct_reorder(Location, start_date)), color="grey") +
geom_point(aes(x=end_date, y=Location),
colour=rgb(0.9,0.3,0.1,0.9), size=3.5 ) +
geom_point(aes(x=start_date, y=Location),
colour=rgb(1.0,0.6,0.1,0.7), size=3) +
scale_x_discrete(breaks =
c(1993:2000))+
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "none",
axis.text.x = element_text(angle=90, hjust=1),
axis.ticks.length.x= unit(0.1, "cm"),
panel.grid.minor.x = element_blank(),
panel.spacing.x = unit(1,"lines")
) +
xlab("Years") +
ylab("Location")+
labs(title=paste("Ocupation of Locations in", sfdf2$Mission),
caption="Data from GeoPKO 2.0")
lolli
lolli <-   ggplot(sfdf2) +
geom_segment(aes(x=start_date, xend=end_date, y=fct_reorder(Location, start_date), yend=fct_reorder(Location, start_date)), color="grey") +
geom_point(aes(x=end_date, y=Location),
colour=rgb(0.9,0.3,0.1,0.9), size=3.5 ) +
geom_point(aes(x=start_date, y=Location),
colour=rgb(1.0,0.6,0.1,0.7), size=3) +
scale_x_discrete(breaks =
c(1993:2000))+
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "none",
axis.text.x = element_text(angle=90, hjust=1),
axis.ticks.length.x= unit(0.1, "cm"),
panel.grid.minor.x = element_blank(),
panel.spacing.x = unit(1,"lines")
) +
xlab("Years") +
ylab("Location")+
labs(title=paste("Occupation of Locations in", sfdf2$Mission),
caption="Data from GeoPKO 2.0")
ggsave("lolli.png", plot=lolli)
runApp()
runApp()
install.packages("plotly")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(sfdf2)
sfdf2 <- Years %>% filter(Mission=="MINUGUA")
View(sfdf2)
View(sfdf2)
View(sfdf2)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
lolli <-   ggplot(sfdf2) +
geom_segment(aes(x=start_date, xend=end_date, y=fct_reorder(Location, start_date), yend=fct_reorder(Location, start_date)), color="grey") +
geom_point(aes(x=as.numeric(end_date), y=Location),
colour=rgb(0.9,0.3,0.1,0.9), size=3.5 ) +
geom_point(aes(x=as.numeric(start_date), y=Location),
colour=rgb(1.0,0.6,0.1,0.7), size=3) +
scale_x_continuous(breaks =
c(1993:2000))+
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "none",
axis.text.x = element_text(angle=90, hjust=1),
axis.ticks.length.x= unit(0.1, "cm"),
panel.grid.minor.x = element_blank(),
panel.spacing.x = unit(1,"lines")
) +
xlab("Years") +
ylab("Location")+
labs(title=paste("Occupation of Locations in", sfdf2$Mission),
caption="Data from GeoPKO 2.0")
lolli
sfdf2 <- Years %>% filter(Mission=="MINUGUA") %>%
mutate_at(vars(c(start_date, end_date)), as.numeric)
lolli <-   ggplot(sfdf2) +
geom_segment(aes(x=start_date, xend=end_date, y=fct_reorder(Location, start_date), yend=fct_reorder(Location, start_date)), color="grey") +
geom_point(aes(x=as.numeric(end_date), y=Location),
colour=rgb(0.9,0.3,0.1,0.9), size=3.5 ) +
geom_point(aes(x=as.numeric(start_date), y=Location),
colour=rgb(1.0,0.6,0.1,0.7), size=3) +
scale_x_continuous(breaks =
c(1993:2000))+
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "none",
axis.text.x = element_text(angle=90, hjust=1),
axis.ticks.length.x= unit(0.1, "cm"),
panel.grid.minor.x = element_blank(),
panel.spacing.x = unit(1,"lines")
) +
xlab("Years") +
ylab("Location")+
labs(title=paste("Occupation of Locations in", sfdf2$Mission),
caption="Data from GeoPKO 2.0")
lolli
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('ShinyTwotabs.R')
library(rsconnect)
deployApp)
deployApp()
shiny::runApp()
runApp()
runApp('ShinyTwotabs.R')
runApp('ShinyTwotabs.R')
runApp('ShinyTwotabs.R')
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
library(gapminder)
library(ggplot2)
library(shiny)
library(gganimate)
theme_set(theme_bw())
ui <- basicPage(
imageOutput("plot1"))
server <- function(input, output) {
output$plot1 <- renderImage({
# A temp file to save the output.
# This file will be removed later by renderImage
outfile <- tempfile(fileext='.gif')
# now make the animation
p = ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop,
color = continent)) + geom_point() + scale_x_log10() +
transition_time(year) # New
anim_save("outfile.gif", animate(p)) # New
# Return a list containing the filename
list(src = "outfile.gif",
contentType = 'image/gif'
# width = 400,
# height = 300,
# alt = "This is alternate text"
)}, deleteFile = TRUE)}
shinyApp(ui, server)
install.packages("gapminder")
library(gapminder)
library(ggplot2)
library(shiny)
library(gganimate)
theme_set(theme_bw())
ui <- basicPage(
imageOutput("plot1"))
server <- function(input, output) {
output$plot1 <- renderImage({
# A temp file to save the output.
# This file will be removed later by renderImage
outfile <- tempfile(fileext='.gif')
# now make the animation
p = ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop,
color = continent)) + geom_point() + scale_x_log10() +
transition_time(year) # New
anim_save("outfile.gif", animate(p)) # New
# Return a list containing the filename
list(src = "outfile.gif",
contentType = 'image/gif'
# width = 400,
# height = 300,
# alt = "This is alternate text"
)}, deleteFile = TRUE)}
shinyApp(ui, server)
runApp()
runApp()
map_df <- geopko %>% unite(joined_date, c("Year","Month"), sep="-") %>%
mutate(timepoint=as.factor(joined_date)) %>%
mutate(slider_time=as.Date(joined_date, "%Y-%B"))
class(map_df$slider_time)
runApp()
runApp()
View(map_df)
runApp()
runApp()
runApp()
runApp()
map_df$slider_time
map_df <- geopko %>% unite(joined_date, c("Year","Month"), sep="-") %>%
mutate(timepoint=as.factor(joined_date)) %>%
mutate(slider_time=as.Date(joined_date))
map_df <- geopko %>% unite(joined_date, c("Year","Month"), sep="-") %>%
mutate(timepoint=as.factor(joined_date)) %>%
mutate(slider_time=as.Date(joined_date, "%Y-%B"))
str(map_df$slider_time)
map_df <- geopko %>% unite(joined_date, c("Year","Month"), sep="-") %>%
mutate(timepoint=as.factor(joined_date)) %>%
mutate(slider_time=zoo::as.yearmon(joined_date, "%Y-%B"))
str(map_df$slider_time)
ui <- basicPage(
imageOutput("animated"))
library(gapminder)
library(ggplot2)
library(shiny)
library(gganimate)
theme_set(theme_bw())
####import data####
geopko <- readr::read_csv("geopko2.csv", col_types = cols(.default="c"),
locale=readr::locale(encoding="latin1"))
iso <- read.csv("geopko_ccode2.csv")
####data prep TCC####
cclist3 <- iso %>% select(Mission, a3) %>% distinct()
geopko <- geopko %>%
mutate(No.troops=as.numeric(No.troops),
No.TCC=as.numeric(No.TCC),
Longitude=as.numeric(Longitude),
Latitude=as.numeric(Latitude),
UNMO.dummy=as.numeric(UNMO.dummy),
UNPOL.dummy=as.numeric(UNPOL.dummy),
HQ=as.factor(HQ))
map_df <- geopko %>% unite(joined_date, c("Year","Month"), sep="-") %>%
mutate(timepoint=as.factor(joined_date)) %>%
mutate(slider_time=zoo::as.yearmon(joined_date, "%Y-%B"))
ui <- basicPage(
imageOutput("animated"))
server <- function(input, output) {
anim_sf <- reactive({
req(input$anim_map)
cclist3 %>% filter(Mission %in% input$anim_map)
})
anim_df <- reactive({
req(input$anim_map)
map_df %>% filter(Mission %in% input$anim_map) %>% arrange(slider_time)
})
output$animated <- renderImage({
outfile <- tempfile(fileext= '.gif')
anim_maplist <- pull(anim_sf(), a3)
anim_mapshapefiles <- gadm_sf_loadCountries(c(paste(anim_maplist)), level=1)
anim_p <- ggplot() + geom_sf(data=anim_mapshapefiles$sf) +
theme_void() +
geom_blank()+
geom_point(data=anim_df(), aes(x=Longitude, y=Latitude, size=No.troops,
color=as.factor(No.TCC), group=Source),
shape=20, alpha = 0.5)+
scale_size_continuous(name="Size of deployment",range=c(2, 20))+
scale_color_brewer(palette="Set1", name="Number of TCCs")+
guides(colour = guide_legend())+
transition_states(states=anim_df()$Source)+
labs(title=paste0(anim_df()$Mission,": ", anim_df()$timepoint),
caption="Sources: Geo-PKO v2.0\n Shapefiles from GADM.")+
ease_aes('linear')
anim_save("outfile.gif", animate(anim_p, fps = 1))
list(src="outfile.gif",
contentType='image/gif'
)}, deleteFile= TRUE)}
shinyApp(ui, server)
ui <- basicPage(title="Some text",
imageOutput("animated"))
library(gapminder)
library(ggplot2)
library(shiny)
library(gganimate)
theme_set(theme_bw())
####import data####
geopko <- readr::read_csv("geopko2.csv", col_types = cols(.default="c"),
locale=readr::locale(encoding="latin1"))
iso <- read.csv("geopko_ccode2.csv")
####data prep TCC####
cclist3 <- iso %>% select(Mission, a3) %>% distinct()
geopko <- geopko %>%
mutate(No.troops=as.numeric(No.troops),
No.TCC=as.numeric(No.TCC),
Longitude=as.numeric(Longitude),
Latitude=as.numeric(Latitude),
UNMO.dummy=as.numeric(UNMO.dummy),
UNPOL.dummy=as.numeric(UNPOL.dummy),
HQ=as.factor(HQ))
map_df <- geopko %>% unite(joined_date, c("Year","Month"), sep="-") %>%
mutate(timepoint=as.factor(joined_date)) %>%
mutate(slider_time=zoo::as.yearmon(joined_date, "%Y-%B"))
ui <- basicPage(title="Some text",
imageOutput("animated"))
server <- function(input, output) {
anim_sf <- reactive({
req(input$anim_map)
cclist3 %>% filter(Mission %in% input$anim_map)
})
anim_df <- reactive({
req(input$anim_map)
map_df %>% filter(Mission %in% input$anim_map) %>% arrange(slider_time)
})
output$animated <- renderImage({
outfile <- tempfile(fileext= '.gif')
anim_maplist <- pull(anim_sf(), a3)
anim_mapshapefiles <- gadm_sf_loadCountries(c(paste(anim_maplist)), level=1)
anim_p <- ggplot() + geom_sf(data=anim_mapshapefiles$sf) +
theme_void() +
geom_blank()+
geom_point(data=anim_df(), aes(x=Longitude, y=Latitude, size=No.troops,
color=as.factor(No.TCC), group=Source),
shape=20, alpha = 0.5)+
scale_size_continuous(name="Size of deployment",range=c(2, 20))+
scale_color_brewer(palette="Set1", name="Number of TCCs")+
guides(colour = guide_legend())+
transition_states(states=anim_df()$Source)+
labs(title=paste0(anim_df()$Mission,": ", anim_df()$timepoint),
caption="Sources: Geo-PKO v2.0\n Shapefiles from GADM.")+
ease_aes('linear')
anim_save("outfile.gif", animate(anim_p, fps = 1))
list(src="outfile.gif",
contentType='image/gif'
)}, deleteFile= TRUE)}
shinyApp(ui, server)
anim_df <- map_df %>%  filter(Mission=="MINUSMA") %>% arrange(timepoint)
View(anim_df)
anim_p <- ggplot() + geom_sf(data=anim_mapshapefiles$sf) +
theme_void() +
geom_blank()+
geom_point(data=anim_df, aes(x=Longitude, y=Latitude, size=No.troops,
color=as.factor(No.TCC), group=Source),
shape=20, alpha = 0.5)+
scale_size_continuous(name="Size of deployment",range=c(2, 20))+
scale_color_brewer(palette="Set1", name="Number of TCCs")+
guides(colour = guide_legend())+
transition_states(states=anim_df$Source)+
labs(title=paste0(anim_df$Mission,": ", anim_df$timepoint),
caption="Sources: Geo-PKO v2.0\n Shapefiles from GADM.")+
ease_aes('linear')
library(gapminder)
library(ggplot2)
library(shiny)
library(gganimate)
theme_set(theme_bw())
####import data####
geopko <- readr::read_csv("geopko2.csv", col_types = cols(.default="c"),
locale=readr::locale(encoding="latin1"))
iso <- read.csv("geopko_ccode2.csv")
####data prep TCC####
cclist3 <- iso %>% select(Mission, a3) %>% distinct()
geopko <- geopko %>%
mutate(No.troops=as.numeric(No.troops),
No.TCC=as.numeric(No.TCC),
Longitude=as.numeric(Longitude),
Latitude=as.numeric(Latitude),
UNMO.dummy=as.numeric(UNMO.dummy),
UNPOL.dummy=as.numeric(UNPOL.dummy),
HQ=as.factor(HQ))
map_df <- geopko %>% unite(joined_date, c("Year","Month"), sep="-") %>%
mutate(timepoint=as.factor(joined_date)) %>%
mutate(slider_time=zoo::as.yearmon(joined_date, "%Y-%B"))
ui <- basicPage(title="Some text",
imageOutput("animated"))
server <- function(input, output) {
output$animated <- renderImage({
outfile <- tempfile(fileext= '.gif')
anim_mapshapefiles <- gadm_sf_loadCountries("MLI", level=1)
anim_df <- map_df %>%  filter(Mission=="MINUSMA") %>% arrange(timepoint)
anim_p <- ggplot() + geom_sf(data=anim_mapshapefiles$sf) +
theme_void() +
geom_blank()+
geom_point(data=anim_df, aes(x=Longitude, y=Latitude, size=No.troops,
color=as.factor(No.TCC), group=Source),
shape=20, alpha = 0.5)+
scale_size_continuous(name="Size of deployment",range=c(2, 20))+
scale_color_brewer(palette="Set1", name="Number of TCCs")+
guides(colour = guide_legend())+
transition_states(states=anim_df$Source)+
labs(title=paste0(anim_df$Mission,": ", anim_df$timepoint),
caption="Sources: Geo-PKO v2.0\n Shapefiles from GADM.")+
ease_aes('linear')
anim_save("outfile.gif", animate(anim_p, fps = 1))
list(src="outfile.gif",
contentType='image/gif'
)}, deleteFile= TRUE)}
shinyApp(ui, server)
anim_mapshapefiles <- gadm_sf_loadCountries("MLI", level=1)
anim_df <- map_df %>%  filter(Mission=="MINUSMA") %>% arrange(timepoint)
anim_p <- ggplot() + geom_sf(data=anim_mapshapefiles$sf) +
theme_void() +
geom_blank()+
geom_point(data=anim_df, aes(x=Longitude, y=Latitude, size=No.troops,
color=as.factor(No.TCC), group=Source),
shape=20, alpha = 0.5)+
scale_size_continuous(name="Size of deployment",range=c(2, 20))+
scale_color_brewer(palette="Set1", name="Number of TCCs")+
guides(colour = guide_legend())+
transition_states(states=anim_df$Source)+
labs(title=paste0(anim_df$Mission,": ", anim_df$timepoint),
caption="Sources: Geo-PKO v2.0\n Shapefiles from GADM.")+
ease_aes('linear')
animate(anim_p, fps=1)
anim_p <- ggplot() + geom_sf(data=anim_mapshapefiles$sf) +
theme_void() +
geom_blank()+
geom_point(data=anim_df, aes(x=Longitude, y=Latitude, size=No.troops,
color=as.factor(No.TCC), group=joined_date),
shape=20, alpha = 0.5)+
scale_size_continuous(name="Size of deployment",range=c(2, 20))+
scale_color_brewer(palette="Set1", name="Number of TCCs")+
guides(colour = guide_legend())+
transition_states(states=anim_df$joined_date)+
ease_aes('linear')
animate(anim_p, fps=1)
View(anim_mapshapefiles)
anim_p <- ggplot() + geom_sf(data=anim_mapshapefiles$sf) +
theme_void() +
geom_point(data=anim_df, aes(x=Longitude, y=Latitude, size=No.troops,
color=as.factor(No.TCC), group=joined_date),
shape=20, alpha = 0.5)+
scale_size_continuous(name="Size of deployment",range=c(2, 20))+
scale_color_brewer(palette="Set1", name="Number of TCCs")+
guides(colour = guide_legend())+
transition_states(states=anim_df$joined_date)+
ease_aes('linear')
animate(anim_p, fps=1)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?animate
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
summary(geopko$No.troops)
hist(geopko$No.troops)
hist(geopko$No.troops)
hist(geopko$No.TCC)
library(dplyr)
geopko %>% filter(No.troops==0) %>% count()
geopko %>% filter(No.troops <300) %>% histogram(geopko$No.troops)
geopko %>% filter(No.troops <300) -> testhistogram
histogram(testhistogram$No.troops)
hist(testhistogram$No.troops)
geopko %>% select(No.TCC, No.troops) %>%
mutate(binary.tcc = ifelse(No.TCC==0, 0, 1),
binary.troops=ifelse(No.troops==0, 0, 1)) -> xtabledf
table(xtabledf)
?prop.table
tbl <- xtabs(binary.tcc~binary.troops, xtabledf)
tbl
library(questionr)
install.packages("questionr")
library(questionr)
tbl <- cross.multi.table(xtabledf$binary.tcc, xtabledf$binary.troops)
View(xtabledf)
class(xtabledf$binary.tcc)
class(xtabledf$binary.troops)
geopko %>% select(No.TCC, No.troops) %>%
mutate(binary.tcc = as.factor(ifelse(No.TCC==0, 0, 1)),
binary.troops=as.factor(ifelse(No.troops==0, 0, 1))) -> xtabledf
tbl <- cross.multi.table(xtabledf$binary.tcc, xtabledf$binary.troops)
tbl <- cross.multi.table(xtabledf$binary.tcc, xtabledf$binary.troops, true.codes=list("Y"))
xtabs(binary.tcc ~ binary.troops, xtabledf)
geopko %>% select(No.TCC, No.troops) %>%
mutate(binary.tcc = ifelse(No.TCC==0, 0, 1),
binary.troops=ifelse(No.troops==0, 0, 1)) -> xtabledf
tbl <- cross.multi.table(xtabledf$binary.tcc,
xtabledf$binary.troops, true.codes=list("Y"))
xtabs(binary.tcc ~ binary.troops, xtabledf)
xtabs(binary.troops ~ binary.tcc, xtabledf)
xtabledf %>%  filter(binary.troops==0, binary.tcc>0) %>% count()
xtabledf %>%  filter(binary.troops==0, binary.tcc==0) %>% count()
xtabledf %>%  filter(binary.troops>0, binary.tcc==0) %>% count()
xtabledf %>%  filter(binary.troops>0, binary.tcc>0) %>% count()
xtabledf %>%  filter(binary.troops>0, binary.tcc==0) %>% distinct(Mission)
geopko %>%
mutate(binary.tcc = ifelse(No.TCC==0, 0, 1),
binary.troops=ifelse(No.troops==0, 0, 1)) -> xtabledf
xtabledf %>%  filter(binary.troops>0, binary.tcc==0) %>% distinct(Mission)
xtabledf %>%  filter(binary.troops>0, binary.tcc==0) %>% head()
xtabledf %>%  filter(binary.troops>0, binary.tcc==0) %>% tail()
xtabledf %>%  filter(binary.troops==0, binary.tcc>0) %>% distinct(Mission)
