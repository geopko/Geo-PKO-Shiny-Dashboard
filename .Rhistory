select(ID, Location, No.troops, RPF:UAV, Other.Type, -RPF_No,
-Inf_No, -FPU_No, -RES_No, -FP_No) %>%
pivot_longer(4:22, names_to="trooptypes", values_to="binary") %>%
filter(binary==1) %>%
mutate(trooptypes=ifelse(trooptypes=="Other.Type", "Others", trooptypes)) %>%
group_by(ID, Location, No.troops) %>%
summarize(Troop.Compo = str_c(trooptypes, collapse=", ")) %>%
select(-ID) -> test
map_df %>% tibble::rowid_to_column("ID") %>%
filter(Mission=="UNAVEM III") %>%
select(ID, Location, No.troops, RPF:UAV, Other.Type, -RPF_No,
-Inf_No, -FPU_No, -RES_No, -FP_No) %>%
pivot_longer(4:22, names_to="trooptypes", values_to="binary") %>%
filter(binary==1) %>%
mutate(trooptypes=ifelse(trooptypes=="Other.Type", "Others", trooptypes)) %>%
group_by(ID, Location, No.troops) %>%
summarize(Troop.Compo = str_c(trooptypes, collapse=", ")) %>%
select(-ID) -> test
map_df %>% tibble::rowid_to_column("ID") %>%
filter(Mission=="UNAVEM III") %>%
select(ID, Location, No.troops, RPF:UAV, Other.Type, -RPF_No,
-Inf_No, -FPU_No, -RES_No, -FP_No) %>%
pivot_longer(4:22, names_to="trooptypes", values_to="binary") %>%
filter(binary==1) %>%
mutate(trooptypes=ifelse(trooptypes=="Other.Type", "Others", trooptypes)) %>%
group_by(ID, Location, No.troops) %>%
summarize(Troop.Compo = str_c(trooptypes, collapse=", ")) %>%
select(-ID) -> test
map_df %>% tibble::rowid_to_column("ID") %>%
filter(Mission=="UNAVEM III") %>%
select(ID, Location, No.troops, RPF:UAV, Other.Type, -RPF_No,
-Inf_No, -FPU_No, -RES_No, -FP_No) %>%
pivot_longer(4:22, names_to="trooptypes", values_to="binary") %>%
filter(binary==1) %>%
mutate(trooptypes=ifelse(trooptypes=="Other.Type", "Others", trooptypes)) %>%
group_by(ID, Location, No.troops) %>%
summarize(Troop.Compo = str_c(trooptypes, collapse=", ")) %>%
select(-ID) -> test
View(test)
map_df %>% tibble::rowid_to_column("ID") %>%
filter(Mission=="UNAVEM II") %>%
select(ID, Location, No.troops, RPF:UAV, Other.Type, -RPF_No,
-Inf_No, -FPU_No, -RES_No, -FP_No) %>%
pivot_longer(4:22, names_to="trooptypes", values_to="binary") %>%
filter(binary==1) %>%
mutate(trooptypes=ifelse(trooptypes=="Other.Type", "Others", trooptypes)) %>%
group_by(ID, Location, No.troops) %>%
summarize(Troop.Compo = str_c(trooptypes, collapse=", ")) %>%
select(-ID) -> test
View(test)
map_df %>% tibble::rowid_to_column("ID") %>%
filter(Mission=="UNAVEM II") %>%
select(ID, Location, No.troops, RPF:UAV, Other.Type, -RPF_No,
-Inf_No, -FPU_No, -RES_No, -FP_No) %>%
pivot_longer(4:22, names_to="trooptypes", values_to="binary") %>%
filter(binary==1) %>%
mutate(trooptypes=ifelse(trooptypes=="Other.Type", "Others", trooptypes)) %>%
group_by(ID, Location, No.troops) %>%
summarize(Troop.Compo = str_c(trooptypes, collapse=", ")) %>%
select(-ID) -> test
View(test)
runApp()
runApp()
?mutate()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
geopko %>% filter(MINURCAT) %>% distinct(Source)
geopko %>% filter(Mission == "MINURCAT") %>% distinct(Source)
geopko %>% filter(Source == "Map no. 4349") -> debug1
View(debug1)
library(countrycode)
geopko <- readr::read_csv("Geo_PKO_v.2.0.csv", col_types = cols(.default="c"),
locale=readr::locale(encoding="latin1"))
?codelist
codelist
names(codelist)
#appending ISO code to the dataset
ISO_df <- codelist %>% select(country.name.en, cown, iso3c)
View(ISO_df)
#appending ISO code to the dataset
ISO_df <- codelist %>% select(cown, iso3c)
names(geopko)
map_df <- left_join(geopko, ISO_df, by=c("cow_code"="cown"))
#appending ISO code to the dataset
ISO_df <- codelist %>% select(cown, iso3c) %>% mutate_all(as.character)
map_df <- left_join(geopko, ISO_df, by=c("cow_code"="cown"))
names(map_df)
map_df$iso3c
map_df %>% filter(is.na(iso3c))
map_df %>% filter(is.na(iso3c)) -> debug2
View(debug1)
View(facetdf2)
View(debug2)
geopko %>% filter(is.na(cown))
geopko %>% filter(is.na(cow_code))
geopko %>% filter(is.na(gwno))
names(geopko)
geopko %>% filter(is.na(gwno))
geopko %>% filter(is.na(gnwo))
map_df <- map_df %>% mutate(iso3c == case_when(Country== "Ethiopia.Eritrea" ~ "ETH, ERI",
Country== "Kosovo" ~ "XKO",
TRUE ~ as.character(.$iso3c)))
warnings()
levels(map_df$iso3c)
View(map_df)
iso3c
#appending ISO code to the dataset
ISO_df <- codelist %>% select(cown, iso3c) %>% mutate_all(as.character)
map_df <- left_join(geopko, ISO_df, by=c("cow_code"="cown"))
map_df <- map_df %>% mutate(iso3c == case_when(Country == "Ethiopia.Eritrea" ~ "ETH, ERI",
Country == "Kosovo" ~ "XKO",
TRUE ~ as.character(iso3c)))
levels(map_df$iso3c)
factor(map_df$iso3c)
factor(map_df$Country)
map_df %>% filter(is.na(iso3c))
map_df <- map_df %>% mutate(iso3c == case_when(Country == "Ethiopia/Eritrea" ~ "ETH, ERI",
Country == "Kosovo" ~ "XKO",
TRUE ~ as.character(iso3c)))
#appending ISO code to the dataset
ISO_df <- codelist %>% select(cown, iso3c) %>% mutate_all(as.character)
map_df <- left_join(geopko, ISO_df, by=c("cow_code"="cown"))
map_df <- map_df %>% mutate(iso3c == case_when(Country == "Ethiopia/Eritrea" ~ "ETH, ERI",
Country == "Kosovo" ~ "XKO",
TRUE ~ as.character(iso3c)))
map_df %>% filter(is.na(iso3c))
#appending ISO code to the dataset
ISO_df <- codelist %>% select(cown, iso3c) %>% mutate_all(as.character)
map_df <- left_join(geopko, ISO_df, by=c("cow_code"="cown"))
map_df <- map_df %>% mutate(iso3c == case_when(Country == "Ethiopia/Eritrea" ~ "ETH, ERI",
Country == "Kosovo" ~ "XKO",
TRUE ~ as.character(iso3c)))
geopko <- readr::read_xlsx("Geo_PKO_v.2.0.csv", col_types = cols(.default="c"),
locale=readr::locale(encoding="latin1"))
if(!require(readxl)) install.packages("readxl")
if(!require(readxl)) install.packages("readxl")
library(readxl)
geopko <- readxl::read_xlxs("Geo_PKO_v.2.0.xlsx", col_types = cols(.default="c"),
locale=readr::locale(encoding="latin1"))
geopko <- readxl::read_xlsx("Geo_PKO_v.2.0.xlsx", col_types = cols(.default="c"),
locale=readr::locale(encoding="latin1"))
geopko <- readxl::read_xlsx("Geo_PKO_v.2.0.xlsx", col_types=cols(.default="c"))
geopko <- readxl::read_xlsx("Geo_PKO_v.2.0.xlsx", col_types="character")
geopko <- readxl::read_xlsx("Geo_PKO_v.2.0.xlsx", col_types="text")
names(geopko)
geopko <- readxl::read_xlsx("Geo_PKO_v.2.0.xlsx", col_types="text")
str(geopko)
geopko <- geopko %>%
mutate_at(vars(c(No.troops, No.TCC, Longitude, Latitude,
UNMO.dummy, UNPOL.dummy)), as.numeric) %>%
mutate(HQ=as.factor(HQ))
shiny::runApp()
geopko <- geopko %>%
mutate_at(vars(c(No.troops, No.TCC, Longitude, Latitude,
UNMO.dummy, UNPOL.dummy)), as.numeric) %>%
mutate(HQ=as.factor(HQ))
#appending ISO code to the dataset
ISO_df <- codelist %>% select(cown, iso3c) %>% mutate_all(as.character)
runApp()
runApp()
geopko <- geopko %>%
mutate_at(vars(c(No.troops, No.TCC, Longitude, Latitude,
UNMO.dummy, UNPOL.dummy)), as.numeric) %>%
mutate(HQ=as.factor(HQ))
geopko <- geopko %>%
mutate_at(vars(c(No.troops, No.TCC, Longitude, Latitude,
UNMO.dummy, UNPOL.dummy)), as.numeric) %>%
mutate(HQ=as.factor(HQ))
geopko <- readxl::read_xlsx("Geo_PKO_v.2.0.xlsx", col_types="text")
str(geopko$No.troops)
factor(geopko$No.troops)
geopko <- geopko %>%
mutate_at(vars(c(No.troops, No.TCC, Longitude, Latitude,
UNMO.dummy, UNPOL.dummy)), as.numeric) %>%
mutate(HQ=as.factor(HQ))
tcc_df <- geopko %>% select(Source, Mission, Year, Month,
No.troops, nameoftcc_1:notroopspertcc_17) %>%
group_by(Source, Mission, Year, Month) %>%
mutate(Total.troops=sum(No.troops, na.rm=T)) %>% ungroup()
#appending ISO code to the dataset
ISO_df <- codelist %>% select(cown, iso3c) %>% mutate_all(as.character)
map_df <- left_join(geopko, ISO_df, by=c("cow_code"="cown"))
map_df %>% filter(is.na(iso3c))
geopko %>% filter(is.na(cow_code))
ISO_df
map_df <- map_df %>% mutate(iso3c == case_when(Country == "Ethiopia/Eritrea" ~ "ETH, ERI",
Country == "Kosovo" ~ "XKO",
TRUE ~ as.character(iso3c)))
map_df %>% filter(is.na(iso3c))
ifelse(Country=="Kosovo", "XKO", iso3c))
map_df <- map_df %>% mutate(iso3c == ifelse(Country=="Ethiopia/Eritrea", "ETH, ERI",
ifelse(Country=="Kosovo", "XKO", iso3c)))
map_df %>% filter(is.na(iso3c))
map_df <- map_df %>% mutate(iso3c = case_when(Country == "Ethiopia/Eritrea" ~ "ETH, ERI",
Country == "Kosovo" ~ "XKO",
TRUE ~ as.character(iso3c)))
map_df %>% filter(is.na(iso3c))
map_df <- map_df %>%
mutate(iso3c = case_when(Country == "Ethiopia/Eritrea" ~ "ETH, ERI",
Country == "Kosovo" ~ "XKO",
TRUE ~ as.character(iso3c))) %>%
mutate(MonthName = month.name[Month]) %>%
unite(joined_date, c("Year","MonthName"), sep=": ", remove=FALSE) %>%
unite(timepoint, c("Year","MonthName"), sep=" ", remove=FALSE)
map_df <- map_df %>%
mutate(iso3c = case_when(Country == "Ethiopia/Eritrea" ~ "ETH, ERI",
Country == "Kosovo" ~ "XKO",
TRUE ~ as.character(iso3c))) %>%
mutate(MonthName = as.character(month(Month, label = TRUE, abbr = FALSE))) %>%
unite(joined_date, c("Year","MonthName"), sep=": ", remove=FALSE) %>%
unite(timepoint, c("Year","MonthName"), sep=" ", remove=FALSE)
map_df <- map_df %>%
mutate(iso3c = case_when(Country == "Ethiopia/Eritrea" ~ "ETH, ERI",
Country == "Kosovo" ~ "XKO",
TRUE ~ as.character(iso3c)),
Month = as.numeric(Month),
MonthName = as.character(month(Month, label = TRUE, abbr = FALSE))) %>%
unite(joined_date, c("Year","MonthName"), sep=": ", remove=FALSE) %>%
unite(timepoint, c("Year","MonthName"), sep=" ", remove=FALSE)
runApp()
shiny::runApp()
runApp()
View(debug1)
max(debug1$No.TCC)
max(as.numeric(debug1$No.TCC))
str(debug1$No.TCC)
max(debug1$No.TCC)
?max
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
max(debug1$No.TCC, na.rm=TRUE)
max(debug1$No.TCC, na.rm=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
geopko <- geopko %>%
mutate_at(vars(c(No.troops, No.TCC, Longitude, Latitude,
UNMO.dummy, UNPOL.dummy)), as.numeric) %>%
mutate(HQ=as.factor(HQ))
tcc_df <- geopko %>% select(Source, Mission, Year, Month,
No.troops, nameoftcc_1:notroopspertcc_17) %>%
group_by(Source, Mission, Year, Month) %>%
mutate(Total.troops=sum(No.troops, na.rm=T)) %>% ungroup()
geopko <- geopko %>%
mutate_at(vars(c(No.troops, No.TCC, Longitude, Latitude,
UNMO.dummy, UNPOL.dummy)), as.numeric) %>%
mutate(HQ=as.factor(HQ))
tcc_df <- geopko %>% select(Source, Mission, Year, Month,
No.troops, nameoftcc_1:notroopspertcc_17) %>%
group_by(Source, Mission, Year, Month) %>%
mutate(Total.troops=sum(No.troops, na.rm=T)) %>% ungroup()
#appending ISO code to the dataset
ISO_df <- codelist %>% select(cown, iso3c) %>% mutate_all(as.character)
map_df <- left_join(geopko, ISO_df, by=c("cow_code"="cown"))
map_df <- map_df %>%
mutate(iso3c = case_when(Country == "Ethiopia/Eritrea" ~ "ETH, ERI",
Country == "Kosovo" ~ "XKO",
TRUE ~ as.character(iso3c)),
Month = as.numeric(Month),
MonthName = as.character(month(Month, label = TRUE, abbr = FALSE))) %>%
unite(joined_date, c("Year","MonthName"), sep=": ", remove=FALSE) %>%
unite(timepoint, c("Year","MonthName"), sep=" ", remove=FALSE)
str(map_df)
cclist3 <- map_df %>% select(Mission, iso3c) %>% distinct() #creating list of country codes for GADM sf files dowload
View(cclist3)
str(cclist3)
#oxford comma paste
country_list <-function(w, oxford=T) {
if(length(w)==1) return(paste("This mission was active in the following country or territory:",w));
if(length(w)==2) return(paste("This mission was active in the following countries or territories:", w[1],"and",w[2]));
paste0("This mission was active in the following countries or territories: ",paste(w[-length(w)], collapse=", "),
ifelse(oxford,",","")," and ", w[length(w)] )
}
cclist3 %>% filter(Mission %in% input$mission_map)
cclist3 %>% filter(Mission %in% "MINUSMA")
cclist3 %>% filter(Mission %in% "MONUC")
str(map_df)
map_df %>% tibble::rowid_to_column("ID") %>%
filter(Mission=="UNAVEM II") %>%
select(ID, Location, No.troops, RPF:UAV, Other.Type, -RPF_No,
-Inf_No, -FPU_No, -RES_No, -FP_No) %>%
pivot_longer(4:22, names_to="trooptypes", values_to="binary") %>%
filter(binary==1) %>%
mutate(trooptypes=ifelse(trooptypes=="Other.Type", "Others", trooptypes)) %>%
group_by(ID, Location, No.troops) %>%
summarize(Troop.Compo = str_c(trooptypes, collapse=", ")) %>%
select(-ID) -> test
View(tcc_df)
View(test)
map_df %>% tibble::rowid_to_column("ID") %>%
filter(Mission=="MONUSCO") %>%
select(ID, Location, No.troops, RPF:UAV, Other.Type, -RPF_No,
-Inf_No, -FPU_No, -RES_No, -FP_No) %>%
pivot_longer(4:22, names_to="trooptypes", values_to="binary") %>%
filter(binary==1) %>%
mutate(trooptypes=ifelse(trooptypes=="Other.Type", "Others", trooptypes)) %>%
group_by(ID, Location, No.troops) %>%
summarize(Troop.Compo = str_c(trooptypes, collapse=", ")) %>%
select(-ID) -> test
View(test)
map_df_temp() %>% tibble::rowid_to_column("ID") %>%
select(ID, Location, No.troops, No.TCC, RPF:UAV, Other.Type, -RPF_No,
-Inf_No, -FPU_No, -RES_No, -FP_No) %>%
mutate_at(vars(Infantry:Other.Type), as.numeric) %>%
rowwise(ID) %>%
mutate(typecheck_var=sum(c_across(Inf:Other.Type))) %>%
filter(typecheck_var >0)
map_df %>% tibble::rowid_to_column("ID") %>%
filter(Mission=="UNAVEM II") %>%
select(ID, Location, No.troops, RPF:UAV, Other.Type, -RPF_No,
-Inf_No, -FPU_No, -RES_No, -FP_No) %>%
pivot_longer(4:22, names_to="trooptypes", values_to="binary") %>%
filter(binary==1) %>%
mutate(trooptypes=ifelse(trooptypes=="Other.Type", "Others", trooptypes)) %>%
group_by(ID, Location, No.troops) %>%
summarize(Troop.Compo = str_c(trooptypes, collapse=", ")) %>%
select(-ID) -> test
View(test)
map_df %>% filter(Mission== "UNAVEM II")
map_df %>% filter(Mission== "UNAVEM II") -> debug3
View(debug3)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
names(map_df)
map_df %>% tibble::rowid_to_column("ID") %>%
filter(Mission=="UNAMID") %>%
select(ID, Location, No.troops, RPF:UAV, Other.Type, -RPF_No,
-Inf_No, -FPU_No, -RES_No, -FP_No) %>%
pivot_longer(4:22, names_to="trooptypes", values_to="binary") %>%
filter(binary==1) %>%
mutate(trooptypes=ifelse(trooptypes=="Other.Type", "Others", trooptypes)) %>%
group_by(ID, Location, No.troops) %>%
summarize(Troop.Compo = str_c(trooptypes, collapse=", ")) %>%
select(-ID) -> test
View(test)
map_df %>% tibble::rowid_to_column("ID") %>%
filter(Mission=="UNAMID") %>%
select(ID, Location, No.troops, RPF:UAV, Other.Type, -RPF_No,
-Inf_No, -FPU_No, -RES_No, -FP_No) %>%
mutate_at(vars(`Inf`:`Other.Type`), as.numeric) %>%
rowwise(ID) %>%
mutate(typecheck_var=sum(c_across(`Inf`:`Other.Type`))) %>%
filter(typecheck_var >0) -> test2
View(test2)
map_df %>% tibble::rowid_to_column("ID") %>%
filter(Mission=="UNAMID") %>%
select(ID, Location, No.troops, RPF:UAV, Other.Type, -RPF_No,
-Inf_No, -FPU_No, -RES_No, -FP_No) %>%
mutate_at(vars(`Inf`:`Other.Type`), as.numeric) %>%
rowwise(ID) %>%
mutate(typecheck_var=sum(c_across(`Inf`:`Other.Type`)))  -> test2
map_df %>% tibble::rowid_to_column("ID") %>%
filter(Source=="Map no. 4349") %>%
select(ID, Location, No.troops, RPF:UAV, Other.Type, -RPF_No,
-Inf_No, -FPU_No, -RES_No, -FP_No) %>%
mutate_at(vars(`Inf`:`Other.Type`), as.numeric) %>%
rowwise(ID) %>%
mutate(typecheck_var=sum(c_across(`Inf`:`Other.Type`)))  -> test2
runApp()
names(test2)
runApp()
runApp()
View(test)
View(test2)
map_df %>% tibble::rowid_to_column("ID") %>%
filter(Mission=="UNAMID") %>%
select(ID, Location, No.troops, No.TCC, RPF:UAV, Other.Type, -RPF_No,
-Inf_No, -FPU_No, -RES_No, -FP_No) %>%
pivot_longer(4:22, names_to="trooptypes", values_to="binary") %>%
filter(binary==1) %>%
mutate(trooptypes=ifelse(trooptypes=="Other.Type", "Others", trooptypes)) %>%
group_by(ID, Location, No.troops) %>%
summarize(Troop.Compo = str_c(trooptypes, collapse=", ")) %>%
select(-ID) -> test
runApp()
map_df %>%  tibble::rowid_to_column("ID") %>%
select(ID, Location, No.troops, No.TCC, RPF:UAV, Other.Type, -RPF, -RPF_No,
-Inf_No, -FPU_No, -RES_No, -FP_No) %>%
mutate(across(everything(), as.character)) %>%
pivot_longer(5:23, names_to="trooptypes", values_to="binary") %>%
filter(binary==1) %>%
mutate(trooptypes=ifelse(trooptypes=="Other.Type", "Others", trooptypes)) %>%
group_by(ID, Location, No.troops, No.TCC) %>%
summarize(Troop.Compo = str_c(trooptypes, collapse=", ")) %>% ungroup() %>%
select(-ID) -> test
map_df %>% tibble::rowid_to_column("ID") %>%
filter(Source=="Map no. 4349") %>%
select(ID, Location, No.troops, No.TCC, RPF:UAV, Other.Type, -RPF_No,
-Inf_No, -FPU_No, -RES_No, -FP_No) %>%
mutate_at(vars(`Inf`:`Other.Type`), as.numeric) %>%
rowwise(ID) %>%
mutate(typecheck_var=sum(c_across(`Inf`:`Other.Type`)))  -> test2
names(test2)
map_df %>%  tibble::rowid_to_column("ID") %>%
select(ID, Location, No.troops, No.TCC, RPF:UAV, Other.Type, -RPF, -RPF_No,
-Inf_No, -FPU_No, -RES_No, -FP_No) %>%
mutate(across(everything(), as.character)) %>%
pivot_longer(5:23, names_to="trooptypes", values_to="binary") %>%
filter(binary==1) %>%
mutate(trooptypes=ifelse(trooptypes=="Other.Type", "Others", trooptypes)) %>%
group_by(ID, Location, No.troops, No.TCC) %>%
summarize(Troop.Compo = str_c(trooptypes, collapse=", ")) %>% ungroup() %>%
select(-ID) -> test
runApp()
runApp()
View(debug1)
debug1 %>% select(No.TCC) %>%  max()
debug1 %>% filter(No.TCC=max(No.TCC))
debug1 %>% filter(No.TCC==max(No.TCC))
debug1 %>% arrange(desc(No.TCC))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
profile()
library(lobstr)
install.packages("lobstr")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(output)
View(g)
Q
Q
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp(display.mode="showcase")
runApp()
runApp()
runApp()
geopko <- readxl::read_xlsx("Geo_PKO_v.2.0.xlsx", col_types="text")
geopko <- geopko %>%
mutate_at(vars(c(No.troops, No.TCC, Longitude, Latitude,
UNMO.dummy, UNPOL.dummy)), as.numeric) %>%
mutate(HQ=as.factor(HQ))
tcc_df <- geopko %>% select(Source, Mission, Year, Month,
No.troops, nameoftcc_1:notroopspertcc_17) %>%
group_by(Source, Mission, Year, Month) %>%
mutate(Total.troops=sum(No.troops, na.rm=T)) %>% ungroup()
#appending ISO code to the dataset
ISO_df <- codelist %>% select(cown, iso3c) %>% mutate_all(as.character)
map_df <- left_join(geopko, ISO_df, by=c("cow_code"="cown"))
map_df <- map_df %>%
mutate(iso3c = case_when(Country == "Ethiopia/Eritrea" ~ "ETH, ERI",
Country == "Kosovo" ~ "XKO",
TRUE ~ as.character(iso3c)),
Month = as.numeric(Month),
MonthName = as.character(month(Month, label = TRUE, abbr = FALSE))) %>%
unite(joined_date, c("Year","MonthName"), sep=": ", remove=FALSE) %>%
unite(timepoint, c("Year","MonthName"), sep=" ", remove=FALSE)
cclist3 <- map_df %>% select(Mission, iso3c) %>% distinct() #creating list of country codes for GADM sf files dowload
write.csv("Geo_PKO_v2.0_iso.csv", map_df)
write_csv("Geo_PKO_v2.0_iso.csv", map_df)
write.csv(map_df, "Geo_PKO_v2.0_iso.csv")
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
