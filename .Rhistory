"<strong>Deployment Location</strong>", "- ", geopko3$mission,
"<br/><strong>Number of Troops: </strong>", geopko3$no.troops,
"<br/><strong>Location: </strong>", geopko3$location,", ", geopko3$country
)
%>%
lapply(htmltools::HTML)
) %>%
addLegend("bottomright",
pal = pal,
values = shapefile.df$average_allwthematic_sb,
title = "Conflict Forecast",
opacity = 1
) %>%
addLayersControl(
baseGroups = c("State-Based Conflict", "Non-State Conflict", "One-Sided Violence"),
overlayGroups = c("Deployment Locations"),
options = layersControlOptions(collapsed = FALSE)
)
map <- map %>% htmlwidgets::prependContent(html_fix) # legend NA fix
map
View(geopko3)
geopko4 <- geopko3 %>%
group_by(prioid) %>%
dplyr::mutate(no.troops = sum(no.troops, na.rm=TRUE)) %>%
filter (! duplicated(no.troops))  %>%
ungroup() %>%
select(-location, -month)
geopko4$pg_id <- geopko4$prioid
priogriddf <- full_join(
geopko4, predictors2,
by = c("pg_id"),
na.rm = TRUE)
# merge data
shapefile.df <- merge(shapefile, priogriddf, by.x = "pg_id", by.y = "pg_id", all.x=F, all.y=T, duplicateGeoms=TRUE)
map <- leaflet(shapefile.df) %>%
addTiles() %>%
addPolygons(
color = "#444444", weight = 0.25, smoothFactor = 0.5,
opacity = 0.05, fillOpacity = 0.4,
fillColor = ~ pal(shapefile.df@data$average_allwthematic_sb),
group = "State-Based Conflict",
highlightOptions = highlightOptions(
color = "white", weight = 2,
bringToFront = FALSE
)
)  %>%
addPolygons(
color = "#444444", weight = 0.25, smoothFactor = 0.5,
opacity = 0.05, fillOpacity = 0.4,
fillColor = ~ pal(shapefile.df@data$average_allwthematic_ns),
group = "Non-State Conflict",
highlightOptions = highlightOptions(
color = "white", weight = 2,
bringToFront = FALSE
)
) %>%
addPolygons(
color = "#444444", weight = 0.25, smoothFactor = 0.5,
opacity = 0.05, fillOpacity = 0.4,
fillColor = ~ pal(shapefile.df@data$average_allwthematic_os),
group = "One-Sided Violence",
highlightOptions = highlightOptions(
color = "white", weight = 2,
bringToFront = FALSE
)
) %>%
addPolygons(
color = "#444444", weight = 0.0, smoothFactor = 0.0,
opacity = 0.0, fillOpacity = 0.0,
label = paste(
"<strong>Troops Deployed: </strong>", shapefile.df@data$no.troops,
"<br/><strong>Mission:</strong>", shapefile.df@data$mission
)
%>%
lapply(htmltools::HTML)
) %>%
# these circle markers use geopko3 data to cover multiple locations per prioid
addCircleMarkers((data <- geopko3$no.troops),
lat = ~latitude, lng = ~longitude,
weight = 1, radius = 2, fillOpacity = 0.6, color = "darkblue",
group = "Deployment Locations",
label = paste(
"<strong>Deployment Location</strong>", "- ", geopko3$mission,
"<br/><strong>Number of Troops: </strong>", geopko3$no.troops,
"<br/><strong>Location: </strong>", geopko3$location,", ", geopko3$country
)
%>%
lapply(htmltools::HTML)
) %>%
addLegend("bottomright",
pal = pal,
values = shapefile.df$average_allwthematic_sb,
title = "Conflict Forecast",
opacity = 1
) %>%
addLayersControl(
baseGroups = c("State-Based Conflict", "Non-State Conflict", "One-Sided Violence"),
overlayGroups = c("Deployment Locations"),
options = layersControlOptions(collapsed = FALSE)
)
map <- map %>% htmlwidgets::prependContent(html_fix) # legend NA fix
map
priogriddf <- full_join(
geopko4, predictors2,
by = c("pg_id"),
na.rm = TRUE)
# merge data
shapefile.df <- merge(shapefile, priogriddf, by.x = "pg_id", by.y = "pg_id", all.x=F, all.y=T, duplicateGeoms=TRUE)
map <- leaflet(shapefile.df) %>%
addTiles() %>%
addPolygons(
color = "#444444", weight = 0.25, smoothFactor = 0.5,
opacity = 0.05, fillOpacity = 0.4,
fillColor = ~ pal(shapefile.df@data$average_allwthematic_sb),
group = "State-Based Conflict",
highlightOptions = highlightOptions(
color = "white", weight = 2,
bringToFront = TRUE
)
)  %>%
addPolygons(
color = "#444444", weight = 0.25, smoothFactor = 0.5,
opacity = 0.05, fillOpacity = 0.4,
fillColor = ~ pal(shapefile.df@data$average_allwthematic_ns),
group = "Non-State Conflict",
highlightOptions = highlightOptions(
color = "white", weight = 2,
bringToFront = TRUE
)
) %>%
addPolygons(
color = "#444444", weight = 0.25, smoothFactor = 0.5,
opacity = 0.05, fillOpacity = 0.4,
fillColor = ~ pal(shapefile.df@data$average_allwthematic_os),
group = "One-Sided Violence",
highlightOptions = highlightOptions(
color = "white", weight = 2,
bringToFront = TRUE
)
) %>%
# these circle markers use geopko3 data to cover multiple locations per prioid
addCircleMarkers((data <- geopko3$no.troops),
lat = ~latitude, lng = ~longitude,
weight = 1, radius = 2, fillOpacity = 0.6, color = "darkblue",
group = "Deployment Locations",
label = paste(
"<strong>Deployment Location</strong>", "- ", geopko3$mission,
"<br/><strong>Number of Troops: </strong>", geopko3$no.troops,
"<br/><strong>Location: </strong>", geopko3$location,", ", geopko3$country
)
%>%
lapply(htmltools::HTML)
) %>%
addLegend("bottomright",
pal = pal,
values = shapefile.df$average_allwthematic_sb,
title = "Conflict Forecast",
opacity = 1
) %>%
addLayersControl(
baseGroups = c("State-Based Conflict", "Non-State Conflict", "One-Sided Violence"),
overlayGroups = c("Deployment Locations"),
options = layersControlOptions(collapsed = FALSE)
) %>%
htmlwidgets::prependContent(html_fix) # legend NA fix
map
View(geopko3)
geopko2 <- geopko %>%
select(mission, month, year, prioid, no.troops, country, location, latitude, longitude) %>%
dplyr::mutate_at(vars(longitude, latitude, month, year, no.troops), as.numeric) %>%
filter(year==2019 & month>6 | year==2020 & month <7) %>%
filter(country != "Kosovo" | country != "Lebanon" | country != "Haiti" | country != "Syria" | country != "Cyprus")
View(geopko2)
geopko2 <- geopko %>%
select(mission, month, year, prioid, no.troops, country, location, latitude, longitude) %>%
dplyr::mutate_at(vars(longitude, latitude, month, year, no.troops), as.numeric) %>%
filter(year==2019 & month>6 | year==2020 & month <7) %>%
filter(country != "Kosovo" | country != "Lebanon" | country != "Haiti" | country != "Syria" | country != "Cyprus")
View(geopko2)
geopko2 <- geopko %>%
select(mission, month, year, prioid, no.troops, country, location, latitude, longitude) %>%
dplyr::mutate_at(vars(longitude, latitude, month, year, no.troops), as.numeric) %>%
filter(year==2019 & month>6 | year==2020 & month <7) %>%
filter(country != "Kosovo" & country != "Lebanon" & country != "Haiti" & country != "Syria" & country != "Cyprus")
View(geopko2)
geopko3 <- geopko2 %>%
group_by(location) %>%
filter (! duplicated(no.troops))  %>%
dplyr::mutate(no.troops = mean(no.troops, na.rm=TRUE)) %>%
dplyr::mutate(no.troops=round(no.troops)) %>%
filter (! duplicated(no.troops))  %>%
ungroup() %>%
select(-month)
geopko4 <- geopko3 %>%
group_by(prioid) %>%
dplyr::mutate(no.troops = sum(no.troops, na.rm=TRUE)) %>%
filter (! duplicated(no.troops))  %>%
ungroup() %>%
select(-location)
priogriddf <- full_join(
geopko4, predictors2,
by = c("pg_id"),
na.rm = TRUE)
geopko4$pg_id <- geopko4$prioid
priogriddf <- full_join(
geopko4, predictors2,
by = c("pg_id"),
na.rm = TRUE)
# merge data
shapefile.df <- merge(shapefile, priogriddf, by.x = "pg_id", by.y = "pg_id", all.x=F, all.y=T, duplicateGeoms=TRUE)
map <- leaflet(shapefile.df) %>%
addTiles() %>%
addPolygons(
color = "#444444", weight = 0.25, smoothFactor = 0.5,
opacity = 0.05, fillOpacity = 0.4,
fillColor = ~ pal(shapefile.df@data$average_allwthematic_sb),
group = "State-Based Conflict",
highlightOptions = highlightOptions(
color = "white", weight = 2,
bringToFront = TRUE
)
)  %>%
addPolygons(
color = "#444444", weight = 0.25, smoothFactor = 0.5,
opacity = 0.05, fillOpacity = 0.4,
fillColor = ~ pal(shapefile.df@data$average_allwthematic_ns),
group = "Non-State Conflict",
highlightOptions = highlightOptions(
color = "white", weight = 2,
bringToFront = TRUE
)
) %>%
addPolygons(
color = "#444444", weight = 0.25, smoothFactor = 0.5,
opacity = 0.05, fillOpacity = 0.4,
fillColor = ~ pal(shapefile.df@data$average_allwthematic_os),
group = "One-Sided Violence",
highlightOptions = highlightOptions(
color = "white", weight = 2,
bringToFront = TRUE
)
) %>%
# these circle markers use geopko3 data to cover multiple locations per prioid
addCircleMarkers((data <- geopko3$no.troops),
lat = ~latitude, lng = ~longitude,
weight = 1, radius = 2, fillOpacity = 0.6, color = "darkblue",
group = "Deployment Locations",
label = paste(
"<strong>Deployment Location</strong>", "- ", geopko3$mission,
"<br/><strong>Number of Troops: </strong>", geopko3$no.troops,
"<br/><strong>Location: </strong>", geopko3$location,", ", geopko3$country
)
%>%
lapply(htmltools::HTML)
) %>%
addLegend("bottomright",
pal = pal,
values = shapefile.df$average_allwthematic_sb,
title = "Conflict Forecast",
opacity = 1
) %>%
addLayersControl(
baseGroups = c("State-Based Conflict", "Non-State Conflict", "One-Sided Violence"),
overlayGroups = c("Deployment Locations"),
options = layersControlOptions(collapsed = FALSE)
) %>%
htmlwidgets::prependContent(html_fix) # legend NA fix
map
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
shiny::runApp('R/Geo-PKO-Shiny-Dashboard')
setwd("~/R/Geo-PKO-Shiny-Dashboard")
geopko <- readr::read_csv("data/Geo_PKO_v2.0_ISO3.csv", col_types = cols(.default = "c"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(dplyr)
library(tidyr)
library(stringr)
library(countrycode)
library(readr)
library(readxl)
library(lubridate)
#### file for mapmaker ####
geopko_raw <- read_xlsx("Geo_PKO_v.2.0.xlsx", col_types = c("text"))
library(dplyr)
library(tidyr)
library(stringr)
library(countrycode)
library(readr)
library(readxl)
library(lubridate)
#### file for mapmaker ####
geopko_raw <- read_xlsx("Geo_PKO_v.2.1.xlsx", col_types = c("text"))
missingyears <- read_xlsx("missingyears.xlsx", col_types = c("text"))
# filtering for any republished maps to remove incorrect data
geopkofilter <- geopko_raw %>%
filter(!str_detect(source, 'republished'))
# merging with missing years data
geopko <- geopkofilter %>%
full_join(geopkofilter, missingyears,
by = c("mission", "year", "location"),
suffix = c("", ""))
# setting class of numeric variables
map_df <- geopko %>%
mutate_at(vars(c(no.troops, no.tcc, longitude, latitude,
unmo.dummy, unmo.dummy)), as.numeric) %>%
mutate(hq=as.factor(hq))
#### TCC dataframe (second map) ####
TCCmapData<-geopko2 %>% select(source:location, latitude, longitude,
no.tcc:notroopspertcc_17, hq) %>%
pivot_longer(nameoftcc_1:notroopspertcc_17,
names_to=c(".value", "TCC_id"),
names_sep="_") %>%
filter(!is.na(nameoftcc)) %>%  #dropping empty tcc name cells
mutate_at(vars(notroopspertcc), as.numeric) %>%
group_by(mission, year, location, latitude, longitude, nameoftcc) %>%
tolower(nameoftcc)
geopko2 <-geopko %>% mutate_at(vars(he.sup, inf.no, res.no,
avia,longitude, latitude), as.numeric) %>%
mutate(NoTroops = as.numeric(no.troops),
UNPOL = as.numeric(unpol.dummy),
UNMO = as.numeric(unmo.dummy),
Reserve = as.numeric(res.no),
Infantry = as.numeric(inf.no),
Med=as.numeric(med))
#### TCC dataframe (second map) ####
TCCmapData<-geopko2 %>% select(source:location, latitude, longitude,
no.tcc:notroopspertcc_17, hq) %>%
pivot_longer(nameoftcc_1:notroopspertcc_17,
names_to=c(".value", "TCC_id"),
names_sep="_") %>%
filter(!is.na(nameoftcc)) %>%  #dropping empty tcc name cells
mutate_at(vars(notroopspertcc), as.numeric) %>%
group_by(mission, year, location, latitude, longitude, nameoftcc) %>%
tolower(nameoftcc)
#### TCC dataframe (second map) ####
TCCmapData<-geopko2 %>% select(source:location, latitude, longitude,
no.tcc:notroopspertcc_17, hq) %>%
pivot_longer(nameoftcc_1:notroopspertcc_17,
names_to=c(".value", "TCC_id"),
names_sep="_") %>%
filter(!is.na(nameoftcc)) %>%  #dropping empty tcc name cells
mutate_at(vars(notroopspertcc), as.numeric) %>%
group_by(mission, year, location, latitude, longitude, nameoftcc) %>%
mutate(nameoftcc=tolower)
#### TCC dataframe (second map) ####
TCCmapData<-geopko2 %>% select(source:location, latitude, longitude,
no.tcc:notroopspertcc_17, hq) %>%
pivot_longer(nameoftcc_1:notroopspertcc_17,
names_to=c(".value", "TCC_id"),
names_sep="_") %>%
filter(!is.na(nameoftcc)) %>%  #dropping empty tcc name cells
mutate_at(vars(notroopspertcc), as.numeric) %>%
group_by(mission, year, location, latitude, longitude, nameoftcc) %>%
mutate(nameoftcc = tolower(nameoftcc))
View(TCCmapData)
TRUE ~ as.character(nameoftcc))
#### TCC dataframe (second map) ####
TCCmapData<-geopko2 %>% select(source:location, latitude, longitude,
no.tcc:notroopspertcc_17, hq) %>%
pivot_longer(nameoftcc_1:notroopspertcc_17,
names_to=c(".value", "TCC_id"),
names_sep="_") %>%
filter(!is.na(nameoftcc)) %>%  #dropping empty tcc name cells
mutate_at(vars(notroopspertcc), as.numeric) %>%
group_by(mission, year, location, latitude, longitude, nameoftcc) %>%
mutate(nameoftcc = case_when(nameoftcc != "NA" ~ tolower(nameoftcc),
TRUE ~ as.character(nameoftcc)))
View(TCCmapData)
TCCmapData %>% filter(nameoftcc == "NA")
TCCmapData<-geopko2 %>% select(source:location, latitude, longitude,
no.tcc:notroopspertcc_17, hq) %>%
pivot_longer(nameoftcc_1:notroopspertcc_17,
names_to=c(".value", "TCC_id"),
names_sep="_") %>%
filter(!is.na(nameoftcc)) %>%  #dropping empty tcc name cells
mutate_at(vars(notroopspertcc), as.numeric)
TCCmapData %>% filter(nameoftcc == "NA")
TCCmapData<-geopko2 %>% select(source:location, latitude, longitude,
no.tcc:notroopspertcc_17, hq) %>%
pivot_longer(nameoftcc_1:notroopspertcc_17,
names_to=c(".value", "TCC_id"),
names_sep="_") %>%
filter(!is.na(nameoftcc)) %>%  #dropping empty tcc name cells
mutate_at(vars(notroopspertcc), as.numeric) %>%
group_by(mission, year, location, latitude, longitude, nameoftcc) %>%
summarise(count.per.tcc.year=as.character(max(notroopspertcc))) %>%
mutate(count.per.tcc.year=ifelse(is.na(count.per.tcc.year), "unknown", count.per.tcc.year),
single.tcc=paste0(nameoftcc, " (",count.per.tcc.year,(")"))) %>%
add_count(year, location, name="No.TCC")%>%
group_by(mission, year, location, latitude, longitude, No.TCC) %>%
summarise(year.overview = str_c(single.tcc, collapse=", "))
TCCmapData %>% filter(nameoftcc == "NA")
TCCmapData<-geopko2 %>% select(source:location, latitude, longitude,
no.tcc:notroopspertcc_17, hq) %>%
pivot_longer(nameoftcc_1:notroopspertcc_17,
names_to=c(".value", "TCC_id"),
names_sep="_") %>%
filter(!is.na(nameoftcc))
View(TCCmapData)
e
TCCmapData<-geopko2 %>% select(source:location, latitude, longitude,
no.tcc:notroopspertcc_17, hq) %>%
pivot_longer(nameoftcc_1:notroopspertcc_17,
names_to=c(".value", "TCC_id"),
names_sep="_") %>%
filter(!is.na(nameoftcc)) %>%  #dropping empty tcc name cells
mutate_at(vars(notroopspertcc), as.numeric) %>%
group_by(mission, year, location, latitude, longitude, nameoftcc) %>%
summarise(count.per.tcc.year=as.character(max(notroopspertcc))) %>%
mutate(count.per.tcc.year=ifelse(is.na(count.per.tcc.year), "unknown", count.per.tcc.year),
single.tcc=paste0(nameoftcc, " (",count.per.tcc.year,(")"))) %>%
add_count(year, location, name="No.TCC")%>%
group_by(mission, year, location, latitude, longitude, No.TCC) %>%
summarise(year.overview = str_c(single.tcc, collapse=", "))
View(TTmapData)
View(TTmapData)
TCCmapData %>% filter(year.overview %in% "NA")
View(TCCmapData)
View(TCCmapData)
#### TCC dataframe (second map) ####
TCCmapData<-geopko2 %>% select(source:location, latitude, longitude,
no.tcc:notroopspertcc_17, hq) %>%
pivot_longer(nameoftcc_1:notroopspertcc_17,
names_to=c(".value", "TCC_id"),
names_sep="_") %>%
filter(!is.na(nameoftcc)) %>%  #dropping empty tcc name cells
mutate_at(vars(notroopspertcc), as.numeric) %>%
group_by(mission, year, location, latitude, longitude, nameoftcc) %>%
summarise(count.per.tcc.year=as.character(max(notroopspertcc))) %>%
mutate(nameoftcc = str_to_title(nameoftcc)) %>%
mutate(count.per.tcc.year=ifelse(is.na(count.per.tcc.year), "unknown", count.per.tcc.year),
single.tcc=paste0(nameoftcc, " (",count.per.tcc.year,(")"))) %>%
add_count(year, location, name="no_tcc")%>%
group_by(mission, year, location, latitude, longitude, no_tcc) %>%
summarise(year.overview = str_c(single.tcc, collapse=", ")) %>%
mutate(no_tcc = case_when(str_detect(year.overview, "NA") ~ no_tcc - 1,
TRUE ~ as.numeric(no_tcc)))
View(TCCmapData)
View(TCCmapData)
TCCmapData %>% filter(year.overview %in% "Unknown") -> debug
#### TCC dataframe (second map) ####
TCCmapData<-geopko2 %>% select(source:location, latitude, longitude,
no.tcc:notroopspertcc_17, hq) %>%
pivot_longer(nameoftcc_1:notroopspertcc_17,
names_to=c(".value", "TCC_id"),
names_sep="_") %>%
filter(!is.na(nameoftcc)) %>%  #dropping empty tcc name cells
mutate_at(vars(notroopspertcc), as.numeric) %>%
group_by(mission, year, location, latitude, longitude, nameoftcc) %>%
summarise(count.per.tcc.year=as.character(max(notroopspertcc))) %>%
mutate(nameoftcc = str_to_title(nameoftcc),
nameoftcc = case_when(nameoftcc == "Uk" ~ "UK",
nameoftcc == "Cote D'ivoire" ~ "Cote d'Ivoire",
nameoftcc == "Usa" ~ "USA",
nameoftcc == "Caricom" ~ "CARICOM",
TRUE ~ nameoftcc)) %>%
mutate(count.per.tcc.year=ifelse(is.na(count.per.tcc.year), "size unknown", count.per.tcc.year),
single.tcc=paste0(nameoftcc, " (",count.per.tcc.year,(")"))) %>%
add_count(year, location, name="no_tcc")%>%
group_by(mission, year, location, latitude, longitude, no_tcc) %>%
summarise(year.overview = str_c(single.tcc, collapse=", "))
#### TCC dataframe (second map) ####
TCCmapData<-geopko2 %>% select(source:location, latitude, longitude,
no.tcc:notroopspertcc_17, hq) %>%
pivot_longer(nameoftcc_1:notroopspertcc_17,
names_to=c(".value", "TCC_id"),
names_sep="_") %>%
filter(!is.na(nameoftcc)) %>%  #dropping empty tcc name cells
mutate_at(vars(notroopspertcc), as.numeric) %>%
group_by(mission, year, location, latitude, longitude, nameoftcc) %>%
summarise(count.per.tcc.year=as.character(max(notroopspertcc))) %>%
mutate(nameoftcc = str_to_title(nameoftcc),
nameoftcc = case_when(nameoftcc == "Uk" ~ "UK",
nameoftcc == "Cote D'ivoire" ~ "Cote d'Ivoire",
nameoftcc == "Usa" ~ "USA",
nameoftcc == "Caricom" ~ "CARICOM",
nameoftcc == "Korea (Rok)" ~ "Korea (ROK)",
TRUE ~ nameoftcc)) %>%
mutate(count.per.tcc.year=ifelse(is.na(count.per.tcc.year), "size unknown", count.per.tcc.year),
single.tcc=paste0(nameoftcc, " (",count.per.tcc.year,(")"))) %>%
add_count(year, location, name="no_tcc")%>%
group_by(mission, year, location, latitude, longitude, no_tcc) %>%
summarise(year.overview = str_c(single.tcc, collapse=", "))
TCCmapData %>% filter(year.overview %in% "NA") -> debug
View(debug)
