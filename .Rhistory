<<<<<<< HEAD
label=paste("<strong>Mission HQ</strong><br/>",filteredDataHQ$location,"-",filteredDataHQ$mission)%>% lapply(htmltools::HTML))
})
###Observe Front map with absolute panel
observe({
leafletProxy(mapId = "basemap_abso", data = filteredData_absolute()) %>%
clearMarkers() %>%
clearShapes() %>%
addCircleMarkers(data = (filteredDataTroop<-filteredData_absolute()%>%filter(ave.no.troops>0)), lat = ~latitude, lng = ~longitude, weight = 1, radius = ~(ave.no.troops)^(1/3.5),
fillOpacity = 0.6, color = ~ColoursFrontmap(ave.no.troops), group = "Deployments (All)",
label=paste("<strong>", filteredDataTroop$mission,"<br/>Location:</strong>",filteredDataTroop$location,"<br/><strong>Troop number:</strong>", filteredDataTroop$ave.no.troops)%>% lapply(htmltools::HTML)) %>%
addCircleMarkers(data = (filteredDataMissionSite<-filteredData_absolute()%>%filter(ave.no.troops==0)), lat = ~latitude, lng = ~longitude, weight = 0.5, radius = 3,
fillOpacity = 0.4, color = "#666666", group = "Deployments (All)",
label=paste("<strong>", filteredDataMissionSite$mission,"<br/>Location:</strong>",filteredDataMissionSite$location, "<br/><strong>Mission site</strong> (no troop deployment)")%>% lapply(htmltools::HTML)) %>%
addCircleMarkers(data = (filteredDataInfantry<-filteredData_absolute()%>%filter(Infantry>0)), lat = ~latitude, lng = ~longitude, weight = 1, radius = ~(ave.no.troops)^(1/3.5),
fillOpacity = 0.6, color = ~ColoursFrontmap(Infantry), group = "Troops (Infantry)",
label=paste("<strong>", filteredDataInfantry$mission,"<br/>Location:</strong>",filteredDataInfantry$location,"<br/><strong>Troop number:</strong>", filteredDataInfantry$Infantry)%>% lapply(htmltools::HTML)) %>%
addCircleMarkers(data = (filteredDataMissionSiteOnly<-filteredData_absolute()%>%filter(ave.no.troops==0)), lat = ~latitude, lng = ~longitude, weight = 0.5, radius = 3,
fillOpacity = 0.4, color = "#666666", group = "Mission Site (No Troops)",
label=paste("<strong>", filteredDataMissionSiteOnly$mission,"<br/>Location:</strong>",filteredDataMissionSiteOnly$location,"<br/><strong>Mission site </strong>(no troop deployment)")%>% lapply(htmltools::HTML)) %>%
addCircleMarkers(data = (filteredDataReserve<-filteredData_absolute()%>%filter(Reserve>0)), lat = ~latitude, lng = ~longitude, weight = 1, radius = ~(Reserve)^(1/3.5),
fillOpacity = 0.6, color = ~ColoursFrontmapReserve(Reserve), group = "Troops (Reserve)",
label=paste("<strong>", filteredDataReserve$mission,"<br/>Location:</strong>",filteredDataReserve$location,"<br/><strong>Reserve Troop number:</strong>", filteredDataReserve$Reserve)%>% lapply(htmltools::HTML)) %>%
addAwesomeMarkers(data = (filteredDataUNPOL<-filteredData_absolute()%>%filter(UNPOL>0)), lat = ~latitude, lng = ~longitude,icon=UNPOLicon, group = "UNPOL",
label=paste("<strong>UNPOL</strong><br/>",filteredDataUNPOL$location,"-",filteredDataUNPOL$mission)%>% lapply(htmltools::HTML)) %>%
addAwesomeMarkers(data = (filteredDataUNMO<-filteredData_absolute()%>%filter(UNMO>0)), lat = ~latitude, lng = ~longitude, icon=UNMOicon, group = "UNMO",
label=paste("<strong>UNMO</strong><br/>",filteredDataUNMO$location,"-",filteredDataUNMO$mission)%>% lapply(htmltools::HTML))%>%
addAwesomeMarkers(data = (filteredDataHQ<-filteredData_absolute()%>%filter(hq==3)), lat = ~latitude, lng = ~longitude, icon = HQicon, group = "Mission HQs",
label=paste("<strong>Mission HQ</strong><br/>",filteredDataHQ$location,"-",filteredDataHQ$mission)%>% lapply(htmltools::HTML))
})
####Second observe for TCC map
observe({
leafletProxy(mapId = "map", data = filteredDataTCC()) %>%
clearMarkers() %>%
clearShapes() %>%
addCircleMarkers(data = filteredDataTCC(), lat = ~latitude, lng = ~longitude, weight = 1, radius = ~(No.TCC)*(1.5),
fillOpacity = 0.6, color = ~ColoursTCCmap(No.TCC), group = "TCC", labelOptions = labelOptions(style= list(
"width"= "150px", "white-space"="normal")),
label = paste("<strong>", filteredDataTCC()$mission,"</strong><br/><strong>Location:</strong>",filteredDataTCC()$location, "<br/><strong>Total number of TCCs:</strong>",filteredDataTCC()$No.TCC,"<br/><strong>Countries:</strong>",filteredDataTCC()$year.overview)%>% lapply(htmltools::HTML))
})
####Third observe for Troop Type map
observe({
leafletProxy(mapId = "TroopTypeMap", data = filteredDataTroopType()) %>%
clearMarkers() %>%
clearShapes() %>%
addCircleMarkers(data = (filteredDataTTInfantry<-filteredDataTroopType()%>%filter(Infantry>0)), lat = ~latitude, lng = ~longitude, weight = 1, radius = ~(Infantry)^(1/3.5),
fillOpacity = 0.6, color = ~ColoursTTmap(Infantry), group = "Infantry",
label = paste("<strong>", filteredDataTTInfantry$mission,"</strong><br/><strong>Location:</strong>",filteredDataTTInfantry$location, "<br/><strong>Troop Number:</strong>",filteredDataTTInfantry$Infantry)%>% lapply(htmltools::HTML))%>%
addAwesomeMarkers(data = (filteredDataTTMed<-filteredDataTroopType()%>%filter(med>0)), lat = ~latitude+0.2, lng = ~longitude+0.2, icon = Medicon, group = "Medical",
label=paste("<strong>Medical</strong><br/>", filteredDataTTMed$location,"-",filteredDataTTMed$mission)%>% lapply(htmltools::HTML))%>%
addAwesomeMarkers(data = (filteredDataTTEng<-filteredDataTroopType()%>%filter(eng>0)), lat = ~latitude, lng = ~longitude, icon = Engicon, group = "Engineering",
label=paste("<strong>Engineering</strong><br/>", filteredDataTTEng$location,"-",filteredDataTTEng$mission)%>% lapply(htmltools::HTML))%>%
addAwesomeMarkers(data = (filteredDataTTSig<-filteredDataTroopType()%>%filter(sig>0)), lat = ~latitude-0.2, lng = ~longitude-0.2, icon = Sigicon, group = "Signals",
label=paste("<strong>Signal</strong><br/>", filteredDataTTSig$location,"-",filteredDataTTSig$mission)%>% lapply(htmltools::HTML))%>%
addAwesomeMarkers(data = (filteredDataTTAvia<-filteredDataTroopType()%>%filter(av>0)), lat = ~latitude+0.4, lng = ~longitude+0.4, icon = Avicon, group = "Aviation",
label=paste("<strong>Aviation</strong><br/>", filteredDataTTAvia$location,"-",filteredDataTTAvia$mission)%>% lapply(htmltools::HTML))%>%
addAwesomeMarkers(data = (filteredDataTTRiv<-filteredDataTroopType()%>%filter(riv>0)), lat = ~latitude-0.6, lng = ~longitude-0.6, icon = Rivicon, group = "Riverine",
label=paste("<strong>Riverine</strong><br/>", filteredDataTTRiv$location,"-",filteredDataTTRiv$mission)%>% lapply(htmltools::HTML))%>%
addAwesomeMarkers(data = (filteredDataTTMaint<-filteredDataTroopType()%>%filter(maint>0)), lat = ~latitude-0.4, lng = ~longitude-0.4, icon = Mainticon, group = "Maintenance",
label=paste("<strong>Maintenance</strong><br/>", filteredDataTTMaint$location,"-",filteredDataTTMaint$mission)%>% lapply(htmltools::HTML))%>%
addAwesomeMarkers(data = (filteredDataTTTra<-filteredDataTroopType()%>%filter(trans>0)), lat = ~latitude+0.6, lng = ~longitude+0.6, icon = Traicon, group = "Transport",
label=paste("<strong>Transport</strong><br/>", filteredDataTTTra$location,"-",filteredDataTTTra$mission)%>% lapply(htmltools::HTML))
})
####TCC tables####
bymap_df <- reactive({
tcc_df %>%
pivot_longer(c(nameoftcc_1:notroopspertcc_17), names_to=c(".value", "tcc_id"), names_sep="_") %>%
filter(!is.na(nameoftcc)) %>%
mutate_at(vars(notroopspertcc), as.numeric) %>%
select(-tcc_id) %>%
group_by(source, mission, year, MonthName, Total.troops, nameoftcc)%>%
summarise(total.tcc=as.character(sum(notroopspertcc), na.rm=TRUE)) %>%
add_count(source, name="No.TCC") %>%
mutate(total.tcc=ifelse(is.na(total.tcc), "size unknown", total.tcc),
overview=paste0(nameoftcc," (",total.tcc,")")) %>%
group_by(source, mission, year, MonthName, Total.troops, No.TCC) %>%
summarise(details=str_c(overview, collapse=", ")) %>%
arrange(desc(year))
})
byyear_df <- reactive({
tcc_df %>%
pivot_longer(c(nameoftcc_1:notroopspertcc_17), names_to=c(".value", "TCC_id"), names_sep="_")%>%
filter(!is.na(nameoftcc)) %>%
mutate_at(vars(notroopspertcc), as.numeric) %>%
select(-TCC_id) %>%
group_by(source, mission, year, month, Total.troops, nameoftcc)%>%
summarise(total.each.tcc=as.character(sum(notroopspertcc, na.rm=TRUE))) %>%
add_count(source, name="No.TCC") %>%
mutate(total.each.tcc=ifelse(total.each.tcc=="0","size unknown", total.each.tcc),
overview=paste0(nameoftcc," (",total.each.tcc,")")) %>%
select(-nameoftcc, -total.each.tcc) %>%
group_by(source, mission, year, month, Total.troops, No.TCC) %>%
summarise(byyear.overview=str_c(overview, collapse=", ")) %>%
arrange(desc(year)) %>%
group_by(mission, year) %>% mutate(min.troops= as.character(min(Total.troops)),
max.troops=as.character(max(Total.troops)),
ave.troops=as.character(round(mean(Total.troops)))) %>%
group_by(mission, year) %>% arrange(desc(No.TCC)) %>% dplyr::slice(1) %>%
mutate(ave.troops=ifelse(is.na(ave.troops), "Unknown", ave.troops),
min.troops=ifelse(is.na(min.troops), "Unknown", min.troops),
max.troops=ifelse(is.na(max.troops), "Unknown", max.troops)) %>%
select(mission, year, No.TCC, byyear.overview, min.troops, max.troops, ave.troops)
})
output$tcc_table <- DT::renderDataTable({
req(input$databy_tcc)
if(input$databy_tcc=="Deployment map"){
DT::datatable(bymap_df(),
colnames = c("Source map", "Mission", "Year", "Month",
"Total Troop Count", "Number of TCCs",
"Details"),
rownames = FALSE)
}
else if(input$databy_tcc=="Year"){
DT::datatable(byyear_df(),
colnames = c("Mission", "Year", "Number of TCCs", "Details",
"Min. Troop Count", "Max. Troop Count", "Mean Troop Count"),
rownames= FALSE)
}
}, height=450)
####deployment maps####
#creating list of sf objects to download
sfdf <- reactive({
req(input$mission_map)
cclist3 %>% filter(mission %in% input$mission_map)
})
observeEvent(input$mission_map,{
updateSelectInput(session, 'timepoint_map',
choices = unique(map_df$joined_date[map_df$mission==input$mission_map]))
})
map_df_temp <- reactive({
req(input$mission_map)
req(input$timepoint_map)
map_df %>% filter(mission %in% input$mission_map) %>%
filter(joined_date %in% input$timepoint_map)
})
size_for_nrow1 <- reactive({
req(map_df_temp())
if(NROW(map_df_temp())==1){
map_df_temp() %>% pull(no.troops) %>% `^`^(1/3)
}
})
# map_zero <- reactive({
#   map_df_temp() %>% filter(No.troops==0, No.TCC==0)
# })
output$basecountries <- renderText({
unique_country <- unique(map_df_temp()$country)
country_list(unique_country)
})
UNMO_df_temp <- reactive({
req(input$MO_map)
map_df_temp() %>% filter(unmo.dummy==1)
})
UNPOL_df_temp <- reactive({
req(input$UNPOL_map)
map_df_temp() %>% filter(unpol.dummy==1)
})
SHQ_df_temp <- reactive({
req(input$SHQ_map)
map_df_temp() %>% filter(hq=="2")
})
MHQ_df_temp <- reactive({
req(input$MHQ_map)
map_df_temp() %>% filter(hq=="3")
})
maplist <- reactive({
sfdf() %>%  pull(iso3c)
})
# mapshapefiles <- reactive({
#   gadm_sf_loadCountries(c(paste(maplist())), level=1)
# })
# max_no_tcc <- reactive({
#   map_df_temp() %>% mutate(No.TCC=ifelse(is.na(No.TCC), 0, No.TCC))
# })
# g <- guide_legend("title")
output$depmap <- renderPlot({
req(input$mission_map)
req(input$timepoint_map)
input$MHQ_map
input$SHQ_map
input$MO_map
input$UNPOL_map
mapshapefiles <- gadm_sf_loadCountries(c(maplist()), level=1)
max_no_tcc <- map_df_temp() %>% mutate(no.tcc=ifelse(is.na(no.tcc), 0, no.tcc))
p <- ggplot() + geom_sf(data=mapshapefiles$sf, fill="grey92") +
theme_void() +
labs(title=paste(map_df_temp()$mission,": ", map_df_temp()$timepoint),
caption="Source: Geo-PKO v2.0\n")+
geom_blank()+
geom_point(data=map_df_temp(),
aes(x=longitude, y=latitude, shape="Blank", color="Blank"),
size=2, stroke=0.7, fill="grey60")+
scale_shape_manual(values=c("Blank"=22),
labels=c("Blank"="Mission sites"),
name="")+
scale_color_manual(values=c("Blank"="grey44"),
labels=c("Blank"="Mission sites"),
name="")+
new_scale_color()+
new_scale("shape")
if (nrow(map_df_temp())>1){
if(max(map_df_temp()$no.troops, na.rm=TRUE)>0){
p <- p+
geom_point(data=map_df_temp() %>% filter(!is.na(no.troops & no.tcc)),
aes(x=longitude, y=latitude, size=no.troops, color=as.integer(no.tcc)),
shape=20, alpha = 0.8)+
scale_size_binned(name="Size of deployment",range=c(2, 16))+
{if (max(max_no_tcc$no.tcc) <=4)
scale_color_continuous(low = "thistle3", high = "darkred",
guide="colorbar", name="No. of Troop-\nContributing Countries",
breaks=c(0,1,2,3,4),
limits=c(0,4))
} +
{if (max(max_no_tcc$no.tcc) > 4)
scale_color_continuous(low = "thistle3", high = "darkred",
guide="colorbar", name="No. of Troop-\nContributing Countries",
breaks=pretty_breaks()
)}
}
else{
p <- p+
geom_point(data=map_df_temp() %>% filter(!is.na(no.troops & no.tcc)),
aes(x=longitude, y=latitude, color=as.integer(no.tcc)),
shape=20, alpha = 0.8)+
{if (max(max_no_tcc$no.tcc) <=4)
scale_color_continuous(low = "thistle3", high = "darkred",
guide="colorbar", name="No. of Troop-\nContributing Countries",
breaks=c(0,1,2,3,4),
limits=c(0,4))
} +
{if (max(max_no_tcc$no.tcc) > 4)
scale_color_continuous(low = "thistle3", high = "darkred",
guide="colorbar", name="No. of Troop-\nContributing Countries",
breaks=pretty_breaks()
)}
}
}
if(nrow(map_df_temp()) ==1){
p <- p+ geom_point(data=map_df_temp() %>% filter(!is.na(no.troops & no.tcc)),
aes(x=longitude, y=latitude, color=as.integer(no.tcc), size="Custom"),
shape=20, alpha = 0.8)+
scale_size_manual(name="Size of deployment", values=c("Custom"=round((max(map_df_temp()$no.troops))^(1/3))),
labels=c("Custom"=paste(max(map_df_temp()$no.troops))))+
{if (max(max_no_tcc$no.tcc) <=4)
scale_color_continuous(low = "thistle3", high = "darkred",
guide="colorbar", name="No. of Troop-\nContributing Countries",
breaks=c(0,1,2,3,4),
limits=c(0,4))
} +
{if (max(max_no_tcc$no.tcc) > 4)
scale_color_continuous(low = "thistle3", high = "darkred",
guide="colorbar", name="No. of Troop-\nContributing Countries",
breaks=pretty_breaks()
)}
}
p <- p +
new_scale_color()+
scale_shape_manual(values=c("SHQ"=3,
"UNMO"=24,
"UNPOL"=23),
labels=c("SHQ"="Sector HQ", "UNMO"="Military Observers", "UNPOL"="UN Police"),
name="")+
scale_color_manual(values=c("SHQ"="orange",
"UNMO"="darkblue",
"UNPOL"="darkgreen"),
labels=c("SHQ"="Sector HQ", "UNMO"="Military Observers", "UNPOL"="UN Police"),
name="")
if(input$MHQ_map){
if(length(MHQ_df_temp()$location)>0){
p <- p +  geom_point(data=MHQ_df_temp(),
aes(x=longitude, y=latitude, shape="HQ"),
shape=4, color="red", size=6)+
geom_label_repel(data=MHQ_df_temp(),
aes(x=longitude, y=latitude, label=paste0("Mission hq: ",location)
),
box.padding = 2,
size = 3,
fill = alpha(c("white"),0.7))}
else{
p <- p + labs(subtitle="Mission HQs not available for this time period. Please deselect the option.")}
}
if(input$SHQ_map){
if(length(SHQ_df_temp()$location)>0){
p <- p +  geom_point(data=map_df_temp() %>% filter(hq=="2"),
aes(x=longitude, y= latitude, shape="SHQ", color="SHQ"), size=5)}
else{
p <- p + labs(subtitle="Sector HQs not available for this time period. Please deselect the option.")}
}
if(input$MO_map){
if(length(UNMO_df_temp()$location)>0){
p <- p +  geom_point(data=map_df_temp() %>% filter(unmo.dummy==1),
aes(x=longitude, y= latitude, shape="UNMO", color="UNMO"),
#color="darkblue",
position=position_jitter(),
size=3)}
else{
p <- p + labs(subtitle="UNMO not found. Please deselect the option.")}
}
if(input$UNPOL_map){
if(length(UNPOL_df_temp()$location)>0){
p <- p +  geom_point(data=map_df_temp() %>% filter(unpol.dummy==1),
aes(x=longitude, y= latitude, shape="UNPOL", color="UNPOL"),
position=position_jitter(),
size=4)}
else{
p <- p + labs(subtitle="UNPOL not found. Please deselect the option.")}
}
p <- p +
theme(plot.subtitle = element_text(color="red"),
plot.title=element_text(face="bold", hjust=0),
#      plot.caption.position = "plot",
plot.caption = element_text(hjust=1),
legend.direction = "horizontal",
legend.position = "bottom",
legend.box = "vertical")
print(p)
}, height=600)
####map_df_detail####
typecheck_df <- reactive({
req(input$mission_map)
req(input$timepoint_map)
map_df_temp() %>% tibble::rowid_to_column("ID") %>%
=======
mutate(trooptypes=case_when(trooptypes == "sf" ~ "Special Forces",
trooptypes == "inf" ~ "Infantry",
trooptypes == "he.sup" ~ "Helicopter Support",
trooptypes == "avia" ~ "Aviation",
trooptypes == "mp" ~ "Military Police",
trooptypes == "uav" ~ "Unmanned Aerial Vehicles",
trooptypes == "recon" ~ "Reconnaissance",
trooptypes == "maint" ~ "Maintenance",
trooptypes == "med" ~ "Medical",
trooptypes == "eng" ~ "Engineer",
trooptypes == "fpu" ~ "Formed Police Unit",
trooptypes == "fp" ~ "Force Protection",
trooptypes == "riv" ~ "Riverine",
trooptypes == "sig" ~ "Signal",
trooptypes == "trans" ~ "Transport",
trooptypes == "other.type" ~ "Others",
trooptypes == "eng" ~ "Engineer",
TRUE ~ as.character(trooptypes))) %>%
group_by(ID, location, no.troops, no.tcc) %>%
summarize(Troop.Compo = str_c(trooptypes, collapse=", ")) %>% ungroup() %>%
mutate(no.tcc=ifelse(is.na(no.tcc), "Unknown", no.tcc)) %>%
select(-ID)
test %>% tibble::rowid_to_column("ID") %>%
select(ID, location, no.troops, no.tcc, rpf:uav, other.type, -rpf.no,
-inf.no, -fpu.no, -res.no, -fp.no) %>%
mutate(across(everything(), as.character)) %>%
pivot_longer(5:23, names_to="trooptypes", values_to="binary") %>%
filter(binary==1) %>%
mutate(trooptypes=case_when(trooptypes == "sf" ~ "Special Forces",
trooptypes == "inf" ~ "Infantry",
trooptypes == "he.sup" ~ "Helicopter Support",
trooptypes == "avia" ~ "Aviation",
trooptypes == "mp" ~ "Military Police",
trooptypes == "uav" ~ "Unmanned Aerial Vehicles",
trooptypes == "recon" ~ "Reconnaissance",
trooptypes == "maint" ~ "Maintenance",
trooptypes == "med" ~ "Medical",
trooptypes == "eng" ~ "Engineer",
trooptypes == "fpu" ~ "Formed Police Unit",
trooptypes == "fp" ~ "Force Protection",
trooptypes == "riv" ~ "Riverine",
trooptypes == "sig" ~ "Signal",
trooptypes == "trans" ~ "Transport",
trooptypes == "other.type" ~ "Others",
trooptypes == "eng" ~ "Engineer",
TRUE ~ as.character(trooptypes)))
test %>% tibble::rowid_to_column("ID") %>%
>>>>>>> NH_debug
select(ID, location, no.troops, no.tcc, rpf:uav, other.type, -rpf.no,
-inf.no, -fpu.no, -res.no, -fp.no) %>%
mutate_at(vars(`inf`:`other.type`), as.numeric) %>%
rowwise(ID) %>%
mutate(typecheck_var=sum(c_across(`inf`:`other.type`))) %>%
filter(typecheck_var >0)
})
static_map_details <- reactive({
if(length(typecheck_df()>0)){
map_df_temp() %>% tibble::rowid_to_column("ID") %>%
select(ID, location, no.troops, no.tcc, rpf:uav, other.type, -rpf.no,
-inf.no, -fpu.no, -res.no, -fp.no) %>%
mutate(across(everything(), as.character)) %>%
pivot_longer(5:23, names_to="trooptypes", values_to="binary") %>%
filter(binary==1) %>%
mutate(trooptypes=case_when(trooptypes == "sf" ~ "Special Forces",
trooptypes == "inf" ~ "Infantry",
trooptypes == "he.sup" ~ "Helicopter Support",
trooptypes == "avia" ~ "Aviation",
trooptypes == "mp" ~ "Military Police",
trooptypes == "uav" ~ "Unmanned Aerial Vehicles",
trooptypes == "recon" ~ "Reconnaissance",
trooptypes == "maint" ~ "Maintenance",
trooptypes == "med" ~ "Medical",
trooptypes == "eng" ~ "Engineer",
trooptypes == "fpu" ~ "Formed Police Unit",
trooptypes == "fp" ~ "Force Protection",
trooptypes == "riv" ~ "Riverine",
trooptypes == "sig" ~ "Signal",
trooptypes == "trans" ~ "Transport",
trooptypes == "other.type" ~ "Others",
trooptypes == "eng" ~ "Engineer",
trooptypes == "rpf" ~ "Regional Protection Force",
trooptypes == "demining" ~ "Demining",
TRUE ~ as.character(trooptypes))) %>%
group_by(ID, location, no.troops, no.tcc) %>%
summarize(Troop.Compo = str_c(trooptypes, collapse=", ")) %>% ungroup() %>%
mutate(no.tcc=ifelse(is.na(no.tcc), "Unknown", no.tcc),
no.troops=ifelse(is.na(no.troops), "Unknown", no.troops)) %>%
select(-ID) -> details1
map_df_temp() %>% tibble::rowid_to_column("ID") %>%
select(ID, location, no.troops, no.tcc, rpf:uav, other.type, -rpf.no,
-inf.no, -fpu.no, -res.no, -fp.no) %>%
mutate(across(everything(), as.character)) %>%
pivot_longer(5:23, names_to="trooptypes", values_to="binary") %>%
filter(binary!=1) %>%
group_by(ID, location, no.troops, no.tcc) %>%
<<<<<<< HEAD
summarize(Troop.Compo = "Data on troop types not available for this location") %>%
ungroup() %>%
mutate(no.tcc=ifelse(is.na(no.tcc), "Unknown", no.tcc),
no.troops=ifelse(is.na(no.troops), "Unknown", no.troops)) %>%
select(-ID) -> details2
rbind(details1, details2)
}
else {
map_df_temp() %>%
select(location, no.troops, no.tcc) %>%
mutate(Troop.type="Data on troop types not available for this location") %>%
mutate(no.tcc=ifelse(is.na(no.tcc), "Unknown", no.tcc))
}
})
output$map_df_details <- renderDataTable({
DT::datatable(static_map_details(),
colnames = c("Location", "No. Troops", "No. TCCs", "Troop Types"),
rownames = FALSE)
})
####animated maps####
anim_sf <- reactive({
req(input$anim_map)
cclist3 %>% filter(mission %in% input$anim_map)
})
anim_df <- eventReactive(input$go_anim,{
req(input$go_anim)
req(input$anim_map)
map_df %>% filter(mission %in% input$anim_map) %>% arrange(timepoint)
})
output$animated <- renderImage({
req(input$anim_map)
req(input$go_anim)
outfile <- tempfile(fileext= '.gif')
anim_maplist <- pull(anim_sf(), iso3c)
anim_max_no_tcc <- anim_df() %>% mutate(no.tcc=ifelse(is.na(no.tcc), 0, no.tcc))
anim_mapshapefiles <- gadm_sf_loadCountries(c(anim_maplist), level=1)
mission_name <- anim_df() %>% distinct(mission)
colourCount = max(anim_df()$no.tcc)
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
anim_p <- ggplot() + geom_sf(data=anim_mapshapefiles$sf, fill="grey92") +
theme_void() +
geom_blank()+
geom_point(data=anim_df(),
aes(x=longitude, y=latitude, shape="Blank", color="Blank"),
size=2, stroke=0.7, fill="grey60")+
scale_shape_manual(values=c("Blank"=22),
labels=c("Blank"="Mission sites"),
name="")+
scale_color_manual(values=c("Blank"="grey44"),
labels=c("Blank"="Mission sites"),
name="")+
new_scale_color()+
new_scale("shape")
if (nrow(anim_df())>1){
if (sum(anim_df()$no.troops, na.rm=TRUE)>0){
anim_p <- ggplot() + geom_sf(data=anim_mapshapefiles$sf) +
theme_void() +
geom_point(data=anim_df(), aes(x=longitude, y=latitude, size=no.troops,
color=as.integer(no.tcc), group=timepoint),
shape=20, alpha = 0.65)+
scale_size_binned(name="Deployment size",range=c(2, 16))+
{if(max(anim_max_no_tcc$no.tcc)<=4)list(
scale_color_continuous(low = "thistle3", high = "darkred",
guide="colorbar", name="No. of Troop-\nContributing Countries",
breaks=c(1,2,3,4),
limits=c(1,4)))
} +
{if(max(anim_max_no_tcc$no.tcc)>4)list(
scale_color_continuous(low = "thistle3", high = "darkred",
guide="colorbar", name="No. of Troop-\nContributing Countries",
breaks=pretty_breaks())
)}
}}
else {
anim_p <- anim_p +
geom_point(data=anim_df() %>% filter(!is.na(no.troops & no.tcc)),
aes(x=longitude, y=latitude, color=as.integer(no.tcc)),
shape=20, alpha = 0.65)+
{if (max(anim_max_no_tcc$no.tcc) <=4)
scale_color_continuous(low = "thistle3", high = "darkred",
guide="colorbar", name="No. of Troop-\nContributing Countries",
breaks=c(0,1,2,3,4),
limits=c(0,4))
} +
{if (max(anim_max_no_tcc$no.tcc) > 4)
scale_color_continuous(low = "thistle3", high = "darkred",
guide="colorbar", name="No. of Troop-\nContributing Countries",
breaks=pretty_breaks()
)}
}
anim_p <- anim_p + theme(plot.subtitle = element_text(color="red"),
plot.title=element_text(face="bold", hjust=0),
#      plot.caption.position = "plot",
plot.caption = element_text(hjust=0.5),
legend.direction = "horizontal",
legend.box="vertical",
legend.position = "bottom",
legend.text = element_text(size=7),
legend.title = element_text(size=7))+
transition_states(states=anim_df()$timepoint, transition_length = 3)+
labs(title=paste0(mission_name,": ", "{closest_state}"),
caption="Source: Geo-PKO v2.0\n")+
enter_fade()+
exit_fade()
#     ease_aes('linear')
anim_save("outfile.gif", animate(anim_p, fps = 5, width=700, height=700, res=150))
list(src="outfile.gif",
contentType='image/gif'
)}, deleteFile= TRUE)
####lollipop####
lollipop_df <- reactive({
req(input$Lollipop_map)
Years %>% filter(mission %in% input$Lollipop_map) %>%
mutate_at(vars(c(start_date, end_date)), as.numeric)
})
height_lollipop <-  reactive({
if(nrow(lollipop_df())<15){400}
else{NROW(lollipop_df())*25+300}
})
output$lollipop <- renderPlot({
lolli <-   ggplot(lollipop_df()) +
geom_segment(aes(x=start_date, xend=end_date,
y=fct_reorder(location, start_date),
yend=fct_reorder(location, start_date)), color="grey") +
geom_point(aes(x=end_date, y=location),
colour=rgb(0.9,0.3,0.1,0.9), size=3.5 ) +
geom_point(aes(x=start_date, y=location),
colour=rgb(1.0,0.6,0.1,0.7), size=3) +
scale_x_continuous(breaks =
seq(1993,2019,1))+
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "none",
axis.text.x = element_text(angle=45, hjust=1),
axis.ticks.length.x= unit(0.1, "cm"),
panel.grid.minor.x = element_blank(),
panel.spacing.x = unit(1,"lines")
) +
xlab("Years") +
ylab("")+ #title already mentions locations, so no need for name
labs(title=paste0(lollipop_df()$mission,": ", lollipop_df()$start_date, "-",lollipop_df()$end_date),
caption="Data: Geo-PKO v2.0")
lolli
}, height=height_lollipop)
}
=======
summarize(troop.compo = case_when(
dc > 0 ~ str_c(trooptypes, collapse=", "),
TRUE ~ "Data on troop types not available for this location"
)) -> test4
View(test4)
runApp()
map_df %>% filter(Mission=="BINUB") -> test
map_df %>% filter(mission=="BINUB") -> test
View(test)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
library(readxl)
library(readr)
geopko2 <- readxl::read_xlsx("Geo_PKO_v2.0.xlsx", col_types="text")
geopko2 <- readxl::read_xlsx("Geo_PKO_v.2.0.xlsx", col_types="text")
View(geopko2)
write_excel_csv(geopko2, "Geo_PKO_v.2.0.csv")
geopko3 <- readr::read_csv("Geo_PKO_v.2.0.csv")
View(geopko3)
shiny::runApp()
runApp()
rsconnect::setAccountInfo(name='geopko', token='C0C48F10F5F800AC83349FF38E5CBF0F', secret='F9Cu9DARdAGevbUw50M3lUOGLUqzapDsYZwkA2De')
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
library(rsconnect)
deployApp(account="geopko")
runApp()
deployApp(account="geopko")
runApp()
deployApp(account="geopko")
deployApp(account="geopko")
runApp()
install.packages("shinyjs")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
geopko <- readr::read_csv("Geo_PKO_v2.0_ISO3.csv", col_types = cols(.default="c"))
geopko %>%
mutate_at(vars(c(no.troops, no.tcc, longitude, latitude,
unmo.dummy, unpol.dummy)), as.numeric) %>%
mutate(hq=as.factor(hq)) %>%
select(source, mission, year, month, MonthName,
no.troops, nameoftcc_1:notroopspertcc_17) %>%
group_by(source, mission, year, month, MonthName) %>%
mutate(Total.troops=sum(no.troops, na.rm=T)) %>% ungroup() %>%
pivot_longer(c(nameoftcc_1:notroopspertcc_17), names_to=c(".value", "tcc_id"), names_sep="_") %>%
filter(!is.na(nameoftcc)) %>%
mutate_at(vars(notroopspertcc), as.numeric) %>%
select(-tcc_id) %>%
group_by(source, mission, year, MonthName, Total.troops, nameoftcc)%>%
summarise(total.tcc=as.character(sum(notroopspertcc), na.rm=TRUE)) %>%
add_count(source, name="No.TCC") %>%
mutate(total.tcc=ifelse(is.na(total.tcc), "size unknown", total.tcc),
overview=paste0(nameoftcc," (",total.tcc,")")) %>%
group_by(source, mission, year, MonthName, Total.troops, No.TCC) %>%
summarise(details=str_c(overview, collapse=", ")) %>%
arrange(desc(year))
geopko %>%
mutate_at(vars(c(no.troops, no.tcc, longitude, latitude,
unmo.dummy, unpol.dummy)), as.numeric) %>%
mutate(hq=as.factor(hq)) %>%
select(source, mission, year, month, MonthName,
no.troops, nameoftcc_1:notroopspertcc_17) %>%
group_by(source, mission, year, month, MonthName) %>%
mutate(Total.troops=sum(no.troops, na.rm=T)) %>% ungroup()
pivot_longer(c(nameoftcc_1:notroopspertcc_17), names_to=c(".value", "TCC_id"), names_sep="_")%>%
filter(!is.na(nameoftcc)) %>%
mutate_at(vars(notroopspertcc), as.numeric) %>%
select(-TCC_id) %>%
group_by(source, mission, year, month, Total.troops, nameoftcc)%>%
summarise(total.each.tcc=as.character(sum(notroopspertcc, na.rm=TRUE))) %>%
add_count(source, name="No.TCC") %>%
mutate(total.each.tcc=ifelse(total.each.tcc=="0","size unknown", total.each.tcc),
overview=paste0(nameoftcc," (",total.each.tcc,")")) %>%
select(-nameoftcc, -total.each.tcc) %>%
group_by(source, mission, year, month, Total.troops, No.TCC) %>%
summarise(byyear.overview=str_c(overview, collapse=", "))
View(geopko)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
>>>>>>> NH_debug
